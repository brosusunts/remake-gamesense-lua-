local Library = {
    Flags = {},
    Theme = {
        Background = Color3.fromRGB(17, 17, 17),
        Section = Color3.fromRGB(24, 24, 24),
        Element = Color3.fromRGB(31, 31, 31),
        Text = Color3.fromRGB(255, 255, 255),
        Accent = Color3.fromRGB(124, 193, 21),
        AccentDark = Color3.fromRGB(91, 142, 15),
        Gray = Color3.fromRGB(195, 195, 195),
        DarkGray = Color3.fromRGB(85, 85, 85),
    },
    Icons = {
        Rage = "rbxassetid://10723424235",
        Legit = "rbxassetid://10723425685",
        Visuals = "rbxassetid://10723425852",
        Misc = "rbxassetid://10723424505"
    },
    Fonts = {
        Regular = Enum.Font.Gotham,
        SemiBold = Enum.Font.GothamSemibold,
        Bold = Enum.Font.GothamBold,
        Light = Enum.Font.GothamMedium
    }
}

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")

-- Premium Animation Settings
Library.Animation = {
    Window = {
        Duration = 0.2,
        Style = Enum.EasingStyle.Quad,
        Direction = Enum.EasingDirection.Out
    },
    Elements = {
        Duration = 0.15,
        Style = Enum.EasingStyle.Linear
    }
}




function Library:CreateWindow()
    -- Main GUI Container
    self.GUI = Instance.new("ScreenGui")
    self.GUI.Name = "GameSense"
    self.GUI.Parent = CoreGui
    
    -- Custom Mouse Cursor
    self.Cursor = Instance.new("ImageLabel")
    self.Cursor.Size = UDim2.new(0, 16, 0, 16)
    self.Cursor.BackgroundTransparency = 1
    self.Cursor.Image = "rbxassetid://7733960981"
    self.Cursor.ImageColor3 = self.Theme.Accent
    self.Cursor.ZIndex = 1000
    self.Cursor.Parent = self.GUI
    
    -- Main Window Frame
    self.Main = Instance.new("Frame")
    self.Main.Name = "Main"
    self.Main.Size = UDim2.new(0, 800, 0, 600)
    self.Main.Position = UDim2.new(0.5, -400, 0.5, -300)
    self.Main.BackgroundColor3 = self.Theme.Background
    self.Main.BorderSizePixel = 0
    self.Main.ClipsDescendants = true
    self.Main.Parent = self.GUI
    
    -- Window Border Glow
    local BorderGlow = Instance.new("ImageLabel")
    BorderGlow.Size = UDim2.new(1, 20, 1, 20)
    BorderGlow.Position = UDim2.new(0, -10, 0, -10)
    BorderGlow.BackgroundTransparency = 1
    BorderGlow.Image = "rbxassetid://5028857084"
    BorderGlow.ImageColor3 = self.Theme.Accent
    BorderGlow.ImageTransparency = 0.8
    BorderGlow.Parent = self.Main
    
    -- Top Bar
    self.TopBar = Instance.new("Frame")
    self.TopBar.Size = UDim2.new(1, 0, 0, 30)
    self.TopBar.BackgroundColor3 = self.Theme.Section
    self.TopBar.BorderSizePixel = 0
    self.TopBar.Parent = self.Main
    
    -- Window Title
    self.Title = Instance.new("TextLabel")
    self.Title.Size = UDim2.new(1, 0, 1, 0)
    self.Title.BackgroundTransparency = 1
    self.Title.Text = "gamesense"
    self.Title.TextColor3 = self.Theme.Text
    self.Title.TextSize = 14
    self.Title.Font = self.Fonts.Bold
    self.Title.Parent = self.TopBar
    
    -- Tab Container
    self.TabContainer = Instance.new("Frame")
    self.TabContainer.Size = UDim2.new(0, 60, 1, -30)
    self.TabContainer.Position = UDim2.new(0, 0, 0, 30)
    self.TabContainer.BackgroundColor3 = self.Theme.Section
    self.TabContainer.BorderSizePixel = 0
    self.TabContainer.Parent = self.Main
    
    -- Content Container
    self.ContentContainer = Instance.new("Frame")
    self.ContentContainer.Size = UDim2.new(1, -60, 1, -30)
    self.ContentContainer.Position = UDim2.new(0, 60, 0, 30)
    self.ContentContainer.BackgroundColor3 = self.Theme.Background
    self.ContentContainer.BorderSizePixel = 0
    self.ContentContainer.Parent = self.Main
    
    -- Initialize Premium Effects
    self:InitializeEffects()
end

function Library:InitializeEffects()
    -- Custom Mouse Implementation
    RunService.RenderStepped:Connect(function()
        self.Cursor.Position = UDim2.new(0, UserInputService:GetMouseLocation().X, 0, UserInputService:GetMouseLocation().Y)
    end)
    UserInputService.MouseIconEnabled = false
    
    -- Window Gradient Effect
    local WindowGradient = Instance.new("UIGradient")
    WindowGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(200, 200, 200))
    })
    WindowGradient.Rotation = 90
    WindowGradient.Transparency = NumberSequence.new({
        NumberSequenceKeypoint.new(0, 0.97),
        NumberSequenceKeypoint.new(1, 0.99)
    })
    WindowGradient.Parent = self.Main
    
    -- Premium Border Effect
    local BorderEffect = Instance.new("Frame")
    BorderEffect.Size = UDim2.new(1, 2, 1, 2)
    BorderEffect.Position = UDim2.new(0, -1, 0, -1)
    BorderEffect.BackgroundColor3 = self.Theme.Accent
    BorderEffect.BackgroundTransparency = 0.5
    BorderEffect.ZIndex = 0
    BorderEffect.Parent = self.Main
    
    -- Animated Accent Line
    local AccentLine = Instance.new("Frame")
    AccentLine.Size = UDim2.new(1, 0, 0, 1)
    AccentLine.Position = UDim2.new(0, 0, 0, 30)
    AccentLine.BackgroundColor3 = self.Theme.Accent
    AccentLine.BorderSizePixel = 0
    AccentLine.Parent = self.Main
    
    local AccentGradient = Instance.new("UIGradient")
    AccentGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, self.Theme.Accent),
        ColorSequenceKeypoint.new(0.5, self.Theme.AccentDark),
        ColorSequenceKeypoint.new(1, self.Theme.Accent)
    })
    AccentGradient.Parent = AccentLine
    
    -- Animate Accent Gradient
    local gradientOffset = 0
    RunService.Heartbeat:Connect(function()
        gradientOffset = (gradientOffset + 0.002) % 1
        AccentGradient.Offset = Vector2.new(gradientOffset, 0)
    end)
    
    -- Window Opening Animation
    self.Main.Size = UDim2.new(0, 0, 0, 0)
    self.Main.BackgroundTransparency = 1
    
    TweenService:Create(self.Main, TweenInfo.new(0.4, Enum.EasingStyle.Quart), {
        Size = UDim2.new(0, 800, 0, 600),
        BackgroundTransparency = 0
    }):Play()
end

function Library:InitializeTabs()
    self.Tabs = {}
    self.ActiveTab = nil
    
    -- Tab List Layout
    local TabList = Instance.new("UIListLayout")
    TabList.Padding = UDim.new(0, 10)
    TabList.HorizontalAlignment = Enum.HorizontalAlignment.Center
    TabList.Parent = self.TabContainer
    
    -- Top Padding
    local TopPadding = Instance.new("UIPadding")
    TopPadding.PaddingTop = UDim.new(0, 15)
    TopPadding.Parent = self.TabContainer
    
    function self:CreateTab(name, icon)
        -- Tab Button
        local TabButton = Instance.new("ImageButton")
        TabButton.Size = UDim2.new(0, 40, 0, 40)
        TabButton.BackgroundColor3 = self.Theme.Element
        TabButton.BackgroundTransparency = 0.7
        TabButton.Image = icon
        TabButton.ImageColor3 = self.Theme.Gray
        TabButton.ImageTransparency = 0.2
        TabButton.Parent = self.TabContainer
        
        -- Tab Button Effects
        local TabGradient = Instance.new("UIGradient")
        TabGradient.Rotation = 90
        TabGradient.Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(200, 200, 200))
        })
        TabGradient.Parent = TabButton
        
        -- Tab Content
        local TabContent = Instance.new("ScrollingFrame")
        TabContent.Size = UDim2.new(1, -20, 1, -20)
        TabContent.Position = UDim2.new(0, 10, 0, 10)
        TabContent.BackgroundTransparency = 1
        TabContent.BorderSizePixel = 0
        TabContent.ScrollBarThickness = 2
        TabContent.ScrollBarImageColor3 = self.Theme.Accent
        TabContent.Visible = false
        TabContent.Parent = self.ContentContainer
        
        -- Content Layout
        local ContentList = Instance.new("UIListLayout")
        ContentList.Padding = UDim.new(0, 10)
        ContentList.Parent = TabContent
        
        -- Auto-size content
        ContentList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            TabContent.CanvasSize = UDim2.new(0, 0, 0, ContentList.AbsoluteContentSize.Y)
        end)
        
        -- Tab Selection Logic
        TabButton.MouseButton1Click:Connect(function()
            if self.ActiveTab then
                -- Fade out old tab
                TweenService:Create(self.ActiveTab.Button, TweenInfo.new(0.2), {
                    ImageColor3 = self.Theme.Gray,
                    BackgroundTransparency = 0.7
                }):Play()
                
                self.ActiveTab.Content.Visible = false
            end
            
            -- Fade in new tab
            TweenService:Create(TabButton, TweenInfo.new(0.2), {
                ImageColor3 = self.Theme.Accent,
                BackgroundTransparency = 0.5
            }):Play()
            
            TabContent.Visible = true
            self.ActiveTab = {Button = TabButton, Content = TabContent}
        end)
        
        -- Hover Effects
        TabButton.MouseEnter:Connect(function()
            if self.ActiveTab and self.ActiveTab.Button == TabButton then return end
            
            TweenService:Create(TabButton, TweenInfo.new(0.2), {
                ImageColor3 = self.Theme.DarkGray,
                BackgroundTransparency = 0.6
            }):Play()
        end)
        
        TabButton.MouseLeave:Connect(function()
            if self.ActiveTab and self.ActiveTab.Button == TabButton then return end
            
            TweenService:Create(TabButton, TweenInfo.new(0.2), {
                ImageColor3 = self.Theme.Gray,
                BackgroundTransparency = 0.7
            }):Play()
        end)
        
        return {Button = TabButton, Content = TabContent}
    end
end

function Library:CreateSection(tab, name)
    -- Section Container
    local Section = Instance.new("Frame")
    Section.Size = UDim2.new(0.5, -15, 0, 0)
    Section.BackgroundColor3 = self.Theme.Section
    Section.BackgroundTransparency = 0.2
    Section.AutomaticSize = Enum.AutomaticSize.Y
    Section.Parent = tab.Content
    
    -- Section Gradient
    local SectionGradient = Instance.new("UIGradient")
    SectionGradient.Rotation = 90
    SectionGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(200, 200, 200))
    })
    SectionGradient.Transparency = NumberSequence.new({
        NumberSequenceKeypoint.new(0, 0.98),
        NumberSequenceKeypoint.new(1, 0.96)
    })
    SectionGradient.Parent = Section
    
    -- Section Header
    local Header = Instance.new("TextLabel")
    Header.Size = UDim2.new(1, -20, 0, 30)
    Header.Position = UDim2.new(0, 10, 0, 0)
    Header.BackgroundTransparency = 1
    Header.Text = string.upper(name)
    Header.TextColor3 = self.Theme.Accent
    Header.TextSize = 12
    Header.Font = self.Fonts.Bold
    Header.TextXAlignment = Enum.TextXAlignment.Left
    Header.Parent = Section
    
    -- Header Accent
    local HeaderAccent = Instance.new("Frame")
    HeaderAccent.Size = UDim2.new(0, 10, 0, 1)
    HeaderAccent.Position = UDim2.new(0, 10, 0, 25)
    HeaderAccent.BackgroundColor3 = self.Theme.Accent
    HeaderAccent.BorderSizePixel = 0
    HeaderAccent.Parent = Section
    
    -- Header Accent Animation
    TweenService:Create(HeaderAccent, TweenInfo.new(0.4, Enum.EasingStyle.Quad), {
        Size = UDim2.new(0, 30, 0, 1)
    }):Play()
    
    -- Elements Container
    local Container = Instance.new("Frame")
    Container.Name = "Elements"
    Container.Size = UDim2.new(1, -20, 0, 0)
    Container.Position = UDim2.new(0, 10, 0, 35)
    Container.BackgroundTransparency = 1
    Container.AutomaticSize = Enum.AutomaticSize.Y
    Container.Parent = Section
    
    -- Elements Layout
    local Layout = Instance.new("UIListLayout")
    Layout.Padding = UDim.new(0, 8)
    Layout.Parent = Container
    
    return Container
end

function Library:CreateToggle(container, name, default)
    -- Toggle Container
    local Toggle = Instance.new("Frame")
    Toggle.Size = UDim2.new(1, 0, 0, 30)
    Toggle.BackgroundColor3 = self.Theme.Element
    Toggle.BackgroundTransparency = 0.7
    Toggle.Parent = container
    
    -- Toggle Button
    local Button = Instance.new("TextButton")
    Button.Size = UDim2.new(1, 0, 1, 0)
    Button.BackgroundTransparency = 1
    Button.Text = ""
    Button.Parent = Toggle
    
    -- Toggle Name
    local Name = Instance.new("TextLabel")
    Name.Size = UDim2.new(1, -50, 1, 0)
    Name.Position = UDim2.new(0, 10, 0, 0)
    Name.BackgroundTransparency = 1
    Name.Text = name
    Name.TextColor3 = self.Theme.Text
    Name.TextSize = 13
    Name.Font = self.Fonts.Regular
    Name.TextXAlignment = Enum.TextXAlignment.Left
    Name.Parent = Toggle
    
    -- Toggle Indicator
    local Indicator = Instance.new("Frame")
    Indicator.Size = UDim2.new(0, 40, 0, 20)
    Indicator.Position = UDim2.new(1, -45, 0.5, -10)
    Indicator.BackgroundColor3 = self.Theme.DarkGray
    Indicator.BorderSizePixel = 0
    Indicator.Parent = Toggle
    
    -- Indicator Rounding
    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(1, 0)
    UICorner.Parent = Indicator
    
    -- Toggle Circle
    local Circle = Instance.new("Frame")
    Circle.Size = UDim2.new(0, 16, 0, 16)
    Circle.Position = UDim2.new(0, 2, 0.5, -8)
    Circle.BackgroundColor3 = self.Theme.Text
    Circle.Parent = Indicator
    
    -- Circle Rounding
    local CircleCorner = Instance.new("UICorner")
    CircleCorner.CornerRadius = UDim.new(1, 0)
    CircleCorner.Parent = Circle
    
    -- Toggle Logic
    local Enabled = default or false
    local Tweening = false
    
    local function UpdateToggle()
        if Tweening then return end
        Tweening = true
        
        Enabled = not Enabled
        local CirclePos = Enabled and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
        local ToggleColor = Enabled and self.Theme.Accent or self.Theme.DarkGray
        
        TweenService:Create(Circle, TweenInfo.new(0.25), {
            Position = CirclePos
        }):Play()
        
        TweenService:Create(Indicator, TweenInfo.new(0.25), {
            BackgroundColor3 = ToggleColor
        }):Play()
        
        wait(0.25)
        Tweening = false
    end
    
    Button.MouseButton1Click:Connect(UpdateToggle)
    
    -- Hover Effect
    Button.MouseEnter:Connect(function()
        TweenService:Create(Toggle, TweenInfo.new(0.25), {
            BackgroundTransparency = 0.5
        }):Play()
    end)
    
    Button.MouseLeave:Connect(function()
        TweenService:Create(Toggle, TweenInfo.new(0.25), {
            BackgroundTransparency = 0.7
        }):Play()
    end)
    
    -- Set Initial State
    if default then
        UpdateToggle()
    end
    
    return {
        Instance = Toggle,
        SetState = UpdateToggle,
        GetState = function() return Enabled end
    }
end

function Library:CreateSlider(container, name, min, max, default, precise)
    -- Slider Container
    local Slider = Instance.new("Frame")
    Slider.Size = UDim2.new(1, 0, 0, 45)
    Slider.BackgroundColor3 = self.Theme.Element
    Slider.BackgroundTransparency = 0.7
    Slider.Parent = container
    
    -- Slider Name
    local Name = Instance.new("TextLabel")
    Name.Size = UDim2.new(1, -65, 0, 20)
    Name.Position = UDim2.new(0, 10, 0, 0)
    Name.BackgroundTransparency = 1
    Name.Text = name
    Name.TextColor3 = self.Theme.Text
    Name.TextSize = 13
    Name.Font = self.Fonts.Regular
    Name.TextXAlignment = Enum.TextXAlignment.Left
    Name.Parent = Slider
    
    -- Value Display
    local Value = Instance.new("TextBox")
    Value.Size = UDim2.new(0, 45, 0, 20)
    Value.Position = UDim2.new(1, -55, 0, 0)
    Value.BackgroundColor3 = self.Theme.Section
    Value.BackgroundTransparency = 0.5
    Value.Text = tostring(default)
    Value.TextColor3 = self.Theme.Accent
    Value.TextSize = 13
    Value.Font = self.Fonts.Bold
    Value.Parent = Slider
    
    -- Slider Bar Container
    local SliderBar = Instance.new("Frame")
    SliderBar.Size = UDim2.new(1, -20, 0, 4)
    SliderBar.Position = UDim2.new(0, 10, 0, 32)
    SliderBar.BackgroundColor3 = self.Theme.Section
    SliderBar.BackgroundTransparency = 0.5
    SliderBar.BorderSizePixel = 0
    SliderBar.Parent = Slider
    
    -- Slider Fill
    local Fill = Instance.new("Frame")
    Fill.Size = UDim2.new((default - min)/(max - min), 0, 1, 0)
    Fill.BackgroundColor3 = self.Theme.Accent
    Fill.BorderSizePixel = 0
    Fill.Parent = SliderBar
    
    -- Slider Drag Logic
    local Dragging = false
    local Value = default
    
    local function UpdateSlider(input)
        local percentage = math.clamp((input.Position.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1)
        local value = math.floor((min + (max - min) * percentage) * (precise and 100 or 1)) / (precise and 100 or 1)
        Value = value
        
        TweenService:Create(Fill, TweenInfo.new(0.1), {
            Size = UDim2.new(percentage, 0, 1, 0)
        }):Play()
        
        Value.Text = tostring(value)
    end
    
    SliderBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            Dragging = true
            UpdateSlider(input)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            Dragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if Dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            UpdateSlider(input)
        end
    end)
    
    -- Hover Effect
    Slider.MouseEnter:Connect(function()
        TweenService:Create(Slider, TweenInfo.new(0.25), {
            BackgroundTransparency = 0.5
        }):Play()
    end)
    
    Slider.MouseLeave:Connect(function()
        TweenService:Create(Slider, TweenInfo.new(0.25), {
            BackgroundTransparency = 0.7
        }):Play()
    end)
    
    return {
        Instance = Slider,
        GetValue = function() return Value end,
        SetValue = function(value)
            Value = value
            Fill.Size = UDim2.new((value - min)/(max - min), 0, 1, 0)
            Value.Text = tostring(value)
        end
    }
end

function Library:CreateDropdown(container, name, options, default)
    -- Dropdown Container
    local Dropdown = Instance.new("Frame")
    Dropdown.Size = UDim2.new(1, 0, 0, 35)
    Dropdown.BackgroundColor3 = self.Theme.Element
    Dropdown.BackgroundTransparency = 0.7
    Dropdown.Parent = container
    
    -- Main Button
    local Button = Instance.new("TextButton")
    Button.Size = UDim2.new(1, 0, 1, 0)
    Button.BackgroundTransparency = 1
    Button.Text = ""
    Button.Parent = Dropdown
    
    -- Dropdown Name
    local Name = Instance.new("TextLabel")
    Name.Size = UDim2.new(1, -40, 0, 35)
    Name.Position = UDim2.new(0, 10, 0, 0)
    Name.BackgroundTransparency = 1
    Name.Text = name
    Name.TextColor3 = self.Theme.Text
    Name.TextSize = 13
    Name.Font = self.Fonts.Regular
    Name.TextXAlignment = Enum.TextXAlignment.Left
    Name.Parent = Dropdown
    
    -- Selected Value
    local Selected = Instance.new("TextLabel")
    Selected.Size = UDim2.new(0, 200, 0, 35)
    Selected.Position = UDim2.new(1, -210, 0, 0)
    Selected.BackgroundTransparency = 1
    Selected.Text = default or options[1]
    Selected.TextColor3 = self.Theme.Accent
    Selected.TextSize = 13
    Selected.Font = self.Fonts.Bold
    Selected.TextXAlignment = Enum.TextXAlignment.Right
    Selected.Parent = Dropdown
    
    -- Arrow Icon
    local Arrow = Instance.new("ImageLabel")
    Arrow.Size = UDim2.new(0, 16, 0, 16)
    Arrow.Position = UDim2.new(1, -30, 0.5, -8)
    Arrow.BackgroundTransparency = 1
    Arrow.Image = "rbxassetid://7733717447"
    Arrow.ImageColor3 = self.Theme.Accent
    Arrow.Parent = Dropdown
    
    -- Options Container
    local OptionsFrame = Instance.new("Frame")
    OptionsFrame.Size = UDim2.new(1, 0, 0, (#options * 30))
    OptionsFrame.Position = UDim2.new(0, 0, 1, 5)
    OptionsFrame.BackgroundColor3 = self.Theme.Element
    OptionsFrame.BackgroundTransparency = 0.7
    OptionsFrame.Visible = false
    OptionsFrame.ZIndex = 5
    OptionsFrame.Parent = Dropdown
    
    -- Create Options
    for i, option in ipairs(options) do
        local OptionButton = Instance.new("TextButton")
        OptionButton.Size = UDim2.new(1, 0, 0, 30)
        OptionButton.Position = UDim2.new(0, 0, 0, (i-1) * 30)
        OptionButton.BackgroundTransparency = 1
        OptionButton.Text = option
        OptionButton.TextColor3 = self.Theme.Text
        OptionButton.TextSize = 13
        OptionButton.Font = self.Fonts.Regular
        OptionButton.ZIndex = 5
        OptionButton.Parent = OptionsFrame
        
        -- Option Selection
        OptionButton.MouseButton1Click:Connect(function()
            Selected.Text = option
            OptionsFrame.Visible = false
            TweenService:Create(Arrow, TweenInfo.new(0.25), {
                Rotation = 0
            }):Play()
        end)
        
        -- Option Hover Effect
        OptionButton.MouseEnter:Connect(function()
            TweenService:Create(OptionButton, TweenInfo.new(0.25), {
                TextColor3 = self.Theme.Accent
            }):Play()
        end)
        
        OptionButton.MouseLeave:Connect(function()
            TweenService:Create(OptionButton, TweenInfo.new(0.25), {
                TextColor3 = self.Theme.Text
            }):Play()
        end)
    end
    
    -- Toggle Dropdown
    Button.MouseButton1Click:Connect(function()
        OptionsFrame.Visible = not OptionsFrame.Visible
        TweenService:Create(Arrow, TweenInfo.new(0.25), {
            Rotation = OptionsFrame.Visible and 180 or 0
        }):Play()
    end)
    
    -- Hover Effect
    Button.MouseEnter:Connect(function()
        TweenService:Create(Dropdown, TweenInfo.new(0.25), {
            BackgroundTransparency = 0.5
        }):Play()
    end)
    
    Button.MouseLeave:Connect(function()
        TweenService:Create(Dropdown, TweenInfo.new(0.25), {
            BackgroundTransparency = 0.7
        }):Play()
    end)
end

function Library:CreateKeybind(container, name, default)
    -- Keybind Container
    local Keybind = Instance.new("Frame")
    Keybind.Size = UDim2.new(1, 0, 0, 35)
    Keybind.BackgroundColor3 = self.Theme.Element
    Keybind.BackgroundTransparency = 0.7
    Keybind.Parent = container
    
    -- Keybind Name
    local Name = Instance.new("TextLabel")
    Name.Size = UDim2.new(1, -80, 1, 0)
    Name.Position = UDim2.new(0, 10, 0, 0)
    Name.BackgroundTransparency = 1
    Name.Text = name
    Name.TextColor3 = self.Theme.Text
    Name.TextSize = 13
    Name.Font = self.Fonts.Regular
    Name.TextXAlignment = Enum.TextXAlignment.Left
    Name.Parent = Keybind
    
    -- Keybind Button
    local Button = Instance.new("TextButton")
    Button.Size = UDim2.new(0, 60, 0, 25)
    Button.Position = UDim2.new(1, -70, 0.5, -12.5)
    Button.BackgroundColor3 = self.Theme.Section
    Button.BackgroundTransparency = 0.5
    Button.Text = default and default.Name or "None"
    Button.TextColor3 = self.Theme.Accent
    Button.TextSize = 13
    Button.Font = self.Fonts.Bold
    Button.Parent = Keybind
    
    -- Button Rounding
    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 4)
    UICorner.Parent = Button
    
    -- Keybind Logic
    local Selecting = false
    local CurrentKey = default
    
    Button.MouseButton1Click:Connect(function()
        Selecting = true
        Button.Text = "..."
        
        local Input = UserInputService.InputBegan:Wait()
        
        if Input.UserInputType == Enum.UserInputType.Keyboard then
            CurrentKey = Input.KeyCode
            Button.Text = Input.KeyCode.Name
            Selecting = false
        end
    end)
    
    -- Hover Effects
    Button.MouseEnter:Connect(function()
        TweenService:Create(Button, TweenInfo.new(0.25), {
            BackgroundTransparency = 0.3
        }):Play()
    end)
    
    Button.MouseLeave:Connect(function()
        TweenService:Create(Button, TweenInfo.new(0.25), {
            BackgroundTransparency = 0.5
        }):Play()
    end)
    
    Keybind.MouseEnter:Connect(function()
        TweenService:Create(Keybind, TweenInfo.new(0.25), {
            BackgroundTransparency = 0.5
        }):Play()
    end)
    
    Keybind.MouseLeave:Connect(function()
        TweenService:Create(Keybind, TweenInfo.new(0.25), {
            BackgroundTransparency = 0.7
        }):Play()
    end)
    
    -- Input Detection
    UserInputService.InputBegan:Connect(function(input)
        if not Selecting and input.UserInputType == Enum.UserInputType.Keyboard then
            if input.KeyCode == CurrentKey then
                -- Trigger keybind action here
            end
        end
    end)
    
    return {
        Instance = Keybind,
        GetKey = function() return CurrentKey end,
        SetKey = function(key)
            CurrentKey = key
            Button.Text = key.Name
        end
    }
end

function Library:CreateColorPicker(container, name, default)
    -- ColorPicker Container
    local ColorPicker = Instance.new("Frame")
    ColorPicker.Size = UDim2.new(1, 0, 0, 35)
    ColorPicker.BackgroundColor3 = self.Theme.Element
    ColorPicker.BackgroundTransparency = 0.7
    ColorPicker.Parent = container
    
    -- ColorPicker Name
    local Name = Instance.new("TextLabel")
    Name.Size = UDim2.new(1, -60, 1, 0)
    Name.Position = UDim2.new(0, 10, 0, 0)
    Name.BackgroundTransparency = 1
    Name.Text = name
    Name.TextColor3 = self.Theme.Text
    Name.TextSize = 13
    Name.Font = self.Fonts.Regular
    Name.TextXAlignment = Enum.TextXAlignment.Left
    Name.Parent = ColorPicker
    
    -- Color Display
    local Display = Instance.new("Frame")
    Display.Size = UDim2.new(0, 40, 0, 20)
    Display.Position = UDim2.new(1, -50, 0.5, -10)
    Display.BackgroundColor3 = default or Color3.fromRGB(255, 255, 255)
    Display.Parent = ColorPicker
    
    -- Display Rounding
    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 4)
    UICorner.Parent = Display
    
    -- Color Picker Window
    local Window = Instance.new("Frame")
    Window.Size = UDim2.new(0, 200, 0, 220)
    Window.Position = UDim2.new(1, 10, 0, 0)
    Window.BackgroundColor3 = self.Theme.Section
    Window.BackgroundTransparency = 0.1
    Window.Visible = false
    Window.ZIndex = 10
    Window.Parent = ColorPicker
    
    -- Color Wheel
    local Wheel = Instance.new("ImageButton")
    Wheel.Size = UDim2.new(0, 150, 0, 150)
    Wheel.Position = UDim2.new(0.5, -75, 0, 10)
    Wheel.Image = "rbxassetid://6020299385"
    Wheel.ZIndex = 11
    Wheel.Parent = Window
    
    -- Saturation/Value Slider
    local ValueSlider = Instance.new("Frame")
    ValueSlider.Size = UDim2.new(0, 150, 0, 15)
    ValueSlider.Position = UDim2.new(0.5, -75, 1, -40)
    ValueSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    ValueSlider.ZIndex = 11
    ValueSlider.Parent = Window
    
    local ValueGradient = Instance.new("UIGradient")
    ValueGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
    })
    ValueGradient.Parent = ValueSlider
    
    -- Color Selection Logic
    local SelectedColor = default or Color3.fromRGB(255, 255, 255)
    local Dragging = false
    
    Display.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            Window.Visible = not Window.Visible
        end
    end)
    
    Wheel.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            Dragging = true
            -- Color selection logic here
        end
    end)
    
    -- Hover Effects
    ColorPicker.MouseEnter:Connect(function()
        TweenService:Create(ColorPicker, TweenInfo.new(0.25), {
            BackgroundTransparency = 0.5
        }):Play()
    end)
    
    ColorPicker.MouseLeave:Connect(function()
        TweenService:Create(ColorPicker, TweenInfo.new(0.25), {
            BackgroundTransparency = 0.7
        }):Play()
    end)
    
    return {
        Instance = ColorPicker,
        GetColor = function() return SelectedColor end,
        SetColor = function(color)
            SelectedColor = color
            Display.BackgroundColor3 = color
        end
    }
end

Library.NotificationSystem = {
    Notifications = {},
    MaxNotifications = 5,
    Duration = 5
}

function Library:CreateNotification(title, message, type)
    -- Notification Container
    local Notification = Instance.new("Frame")
    Notification.Size = UDim2.new(0, 280, 0, 80)
    Notification.Position = UDim2.new(1, 310, 1, -90)
    Notification.BackgroundColor3 = self.Theme.Section
    Notification.BackgroundTransparency = 0.1
    Notification.Parent = self.GUI
    
    -- Notification Title
    local Title = Instance.new("TextLabel")
    Title.Size = UDim2.new(1, -20, 0, 25)
    Title.Position = UDim2.new(0, 10, 0, 5)
    Title.BackgroundTransparency = 1
    Title.Text = title
    Title.TextColor3 = self.Theme.Accent
    Title.TextSize = 14
    Title.Font = self.Fonts.Bold
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Parent = Notification
    
    -- Notification Message
    local Message = Instance.new("TextLabel")
    Message.Size = UDim2.new(1, -20, 0, 40)
    Message.Position = UDim2.new(0, 10, 0, 30)
    Message.BackgroundTransparency = 1
    Message.Text = message
    Message.TextColor3 = self.Theme.Text
    Message.TextSize = 13
    Message.Font = self.Fonts.Regular
    Message.TextXAlignment = Enum.TextXAlignment.Left
    Message.TextWrapped = true
    Message.Parent = Notification
    
    -- Type Icon
    local Icon = Instance.new("ImageLabel")
    Icon.Size = UDim2.new(0, 20, 0, 20)
    Icon.Position = UDim2.new(1, -30, 0, 7)
    Icon.BackgroundTransparency = 1
    Icon.Image = type == "success" and "rbxassetid://7733715400" or "rbxassetid://7733799185"
    Icon.ImageColor3 = type == "success" and Color3.fromRGB(85, 255, 127) or Color3.fromRGB(255, 85, 85)
    Icon.Parent = Notification
    
    -- Progress Bar
    local Progress = Instance.new("Frame")
    Progress.Size = UDim2.new(1, 0, 0, 2)
    Progress.Position = UDim2.new(0, 0, 1, -2)
    Progress.BackgroundColor3 = self.Theme.Accent
    Progress.Parent = Notification
    
    -- Animation
    TweenService:Create(Notification, TweenInfo.new(0.5, Enum.EasingStyle.Quart), {
        Position = UDim2.new(1, -290, 1, -90)
    }):Play()
    
    TweenService:Create(Progress, TweenInfo.new(self.NotificationSystem.Duration), {
        Size = UDim2.new(0, 0, 0, 2)
    }):Play()
    
    -- Queue Management
    table.insert(self.NotificationSystem.Notifications, Notification)
    self:UpdateNotificationQueue()
    
    -- Auto Remove
    task.delay(self.NotificationSystem.Duration, function()
        TweenService:Create(Notification, TweenInfo.new(0.5, Enum.EasingStyle.Quart), {
            Position = UDim2.new(1, 310, 1, -90)
        }):Play()
        
        wait(0.5)
        table.remove(self.NotificationSystem.Notifications, table.find(self.NotificationSystem.Notifications, Notification))
        Notification:Destroy()
        self:UpdateNotificationQueue()
    end)
end

function Library:UpdateNotificationQueue()
    for i, notification in ipairs(self.NotificationSystem.Notifications) do
        TweenService:Create(notification, TweenInfo.new(0.5), {
            Position = UDim2.new(1, -290, 1, -90 - (90 * (i-1)))
        }):Play()
    end
end

Library.ConfigSystem = {
    Configs = {},
    CurrentConfig = nil,
    SavePath = "GameSense/Configs/"
}

function Library:InitializeConfigSystem()
    -- Create Config Container
    local ConfigSection = self:CreateSection(self.Tabs.Misc.Content, "CONFIGURATION")
    
    -- Config Name Input
    local ConfigName = Instance.new("TextBox")
    ConfigName.Size = UDim2.new(1, -20, 0, 30)
    ConfigName.BackgroundColor3 = self.Theme.Element
    ConfigName.BackgroundTransparency = 0.7
    ConfigName.Text = ""
    ConfigName.PlaceholderText = "Config Name"
    ConfigName.TextColor3 = self.Theme.Text
    ConfigName.PlaceholderColor3 = self.Theme.DarkGray
    ConfigName.TextSize = 13
    ConfigName.Font = self.Fonts.Regular
    ConfigName.Parent = ConfigSection
    
    -- Config Actions
    local function CreateConfigButton(text, position)
        local Button = Instance.new("TextButton")
        Button.Size = UDim2.new(0.5, -10, 0, 30)
        Button.Position = position
        Button.BackgroundColor3 = self.Theme.Element
        Button.BackgroundTransparency = 0.7
        Button.Text = text
        Button.TextColor3 = self.Theme.Text
        Button.TextSize = 13
        Button.Font = self.Fonts.Regular
        Button.Parent = ConfigSection
        
        -- Hover Effect
        Button.MouseEnter:Connect(function()
            TweenService:Create(Button, TweenInfo.new(0.25), {
                BackgroundTransparency = 0.5
            }):Play()
        end)
        
        Button.MouseLeave:Connect(function()
            TweenService:Create(Button, TweenInfo.new(0.25), {
                BackgroundTransparency = 0.7
            }):Play()
        end)
        
        return Button
    end
    
    local SaveButton = CreateConfigButton("Save", UDim2.new(0, 0, 0, 40))
    local LoadButton = CreateConfigButton("Load", UDim2.new(0.5, 10, 0, 40))
    
    -- Config Functions
    function self.ConfigSystem:SaveConfig(name)
        local config = {
            Elements = {},
            Theme = Library.Theme
        }
        
        -- Save all element states
        for _, tab in pairs(Library.Tabs) do
            for _, element in pairs(tab.Elements or {}) do
                if element.Save then
                    config.Elements[element.ID] = element:Save()
                end
            end
        end
        
        -- Save to file
        writefile(self.SavePath .. name .. ".gs", game:GetService("HttpService"):JSONEncode(config))
        self:CreateNotification("Success", "Configuration saved!", "success")
    end
    
    function self.ConfigSystem:LoadConfig(name)
        if not isfile(self.SavePath .. name .. ".gs") then
            self:CreateNotification("Error", "Configuration not found!", "error")
            return
        end
        
        local config = game:GetService("HttpService"):JSONDecode(readfile(self.SavePath .. name .. ".gs"))
        
        -- Load theme
        for key, value in pairs(config.Theme) do
            Library.Theme[key] = value
        end
        
        -- Load element states
        for id, data in pairs(config.Elements) do
            local element = Library:GetElementByID(id)
            if element and element.Load then
                element:Load(data)
            end
        end
        
        self:CreateNotification("Success", "Configuration loaded!", "success")
    end
    
    -- Button Actions
    SaveButton.MouseButton1Click:Connect(function()
        if ConfigName.Text ~= "" then
            self.ConfigSystem:SaveConfig(ConfigName.Text)
        end
    end)
    
    LoadButton.MouseButton1Click:Connect(function()
        if ConfigName.Text ~= "" then
            self.ConfigSystem:LoadConfig(ConfigName.Text)
        end
    end)
end

function Library:InitializePremiumEffects()
    -- Window Blur Effect
    local Blur = Instance.new("BlurEffect")
    Blur.Size = 0
    Blur.Parent = game:GetService("Lighting")
    
    -- Animate Blur on Window Open/Close
    function self:ToggleBlur(state)
        TweenService:Create(Blur, TweenInfo.new(0.3), {
            Size = state and 20 or 0
        }):Play()
    end
    
    -- Premium Particle Effects
    local ParticleEmitter = Instance.new("ParticleEmitter")
    ParticleEmitter.Texture = "rbxassetid://7733774737"
    ParticleEmitter.Color = ColorSequence.new(self.Theme.Accent)
    ParticleEmitter.Size = NumberSequence.new({
        NumberSequenceKeypoint.new(0, 0.5),
        NumberSequenceKeypoint.new(1, 0)
    })
    ParticleEmitter.Transparency = NumberSequence.new({
        NumberSequenceKeypoint.new(0, 0.8),
        NumberSequenceKeypoint.new(1, 1)
    })
    ParticleEmitter.Speed = NumberRange.new(20, 30)
    ParticleEmitter.Rotation = NumberRange.new(0, 360)
    ParticleEmitter.RotSpeed = NumberRange.new(-30, 30)
    ParticleEmitter.Rate = 5
    ParticleEmitter.Parent = self.Main
    
    -- Window Glow Effect
    local GlowEffect = Instance.new("ImageLabel")
    GlowEffect.Size = UDim2.new(1, 40, 1, 40)
    GlowEffect.Position = UDim2.new(0, -20, 0, -20)
    GlowEffect.BackgroundTransparency = 1
    GlowEffect.Image = "rbxassetid://7733964742"
    GlowEffect.ImageColor3 = self.Theme.Accent
    GlowEffect.ImageTransparency = 0.9
    GlowEffect.Parent = self.Main
    
    -- Accent Line Animation
    local AccentLine = Instance.new("Frame")
    AccentLine.Size = UDim2.new(0, 2, 1, 0)
    AccentLine.BackgroundColor3 = self.Theme.Accent
    AccentLine.BorderSizePixel = 0
    AccentLine.Parent = self.Main
    
    -- Animate Accent Line
    local function AnimateAccentLine()
        TweenService:Create(AccentLine, TweenInfo.new(1.5, Enum.EasingStyle.Quad), {
            Position = UDim2.new(1, -2, 0, 0)
        }):Play()
        wait(1.5)
        AccentLine.Position = UDim2.new(0, 0, 0, 0)
        AnimateAccentLine()
    end
    AnimateAccentLine()
    
    -- Premium Window Shadow
    local Shadow = Instance.new("ImageLabel")
    Shadow.Size = UDim2.new(1, 50, 1, 50)
    Shadow.Position = UDim2.new(0, -25, 0, -25)
    Shadow.BackgroundTransparency = 1
    Shadow.Image = "rbxassetid://7733955451"
    Shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    Shadow.ImageTransparency = 0.8
    Shadow.Parent = self.Main
    
    -- Window Ripple Effect
    self.Main.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            local Ripple = Instance.new("Frame")
            Ripple.Size = UDim2.new(0, 0, 0, 0)
            Ripple.Position = UDim2.new(0, input.Position.X, 0, input.Position.Y)
            Ripple.BackgroundColor3 = self.Theme.Accent
            Ripple.BackgroundTransparency = 0.8
            Ripple.Parent = self.Main
            
            local RippleCorner = Instance.new("UICorner")
            RippleCorner.CornerRadius = UDim.new(1, 0)
            RippleCorner.Parent = Ripple
            
            TweenService:Create(Ripple, TweenInfo.new(0.5), {
                Size = UDim2.new(0, 200, 0, 200),
                Position = UDim2.new(0, input.Position.X - 100, 0, input.Position.Y - 100),
                BackgroundTransparency = 1
            }):Play()
            
            game.Debris:AddItem(Ripple, 0.5)
        end
    end)
end

function Library:InitializePremiumAnimations()
    -- Tab Switching Animations
    function self:AnimateTabSwitch(oldTab, newTab)
        if oldTab then
            -- Fade out old tab
            TweenService:Create(oldTab, TweenInfo.new(0.3), {
                Position = UDim2.new(0.05, 0, 0, 0),
                BackgroundTransparency = 1
            }):Play()
        end
        
        -- Fade in new tab
        newTab.Position = UDim2.new(-0.05, 0, 0, 0)
        newTab.BackgroundTransparency = 1
        newTab.Visible = true
        
        TweenService:Create(newTab, TweenInfo.new(0.3), {
            Position = UDim2.new(0, 0, 0, 0),
            BackgroundTransparency = 0
        }):Play()
    end
    
    -- Element Hover Animations
    function self:CreateHoverAnimation(element)
        local HoverFrame = Instance.new("Frame")
        HoverFrame.Size = UDim2.new(0, 0, 1, 0)
        HoverFrame.BackgroundColor3 = self.Theme.Accent
        HoverFrame.BackgroundTransparency = 0.9
        HoverFrame.BorderSizePixel = 0
        HoverFrame.Parent = element
        
        element.MouseEnter:Connect(function()
            TweenService:Create(HoverFrame, TweenInfo.new(0.3), {
                Size = UDim2.new(1, 0, 1, 0)
            }):Play()
        end)
        
        element.MouseLeave:Connect(function()
            TweenService:Create(HoverFrame, TweenInfo.new(0.3), {
                Size = UDim2.new(0, 0, 1, 0)
            }):Play()
        end)
    end
    
    -- Section Expansion Animation
    function self:AnimateSectionExpansion(section, expanded)
        TweenService:Create(section, TweenInfo.new(0.3), {
            Size = expanded and UDim2.new(1, 0, 0, section.AbsoluteSize.Y + 100) or UDim2.new(1, 0, 0, 30)
        }):Play()
    end
    
    -- Dropdown Animation
    function self:AnimateDropdown(dropdown, expanded)
        TweenService:Create(dropdown, TweenInfo.new(0.3), {
            Size = expanded and UDim2.new(1, 0, 0, dropdown.AbsoluteSize.Y + 100) or UDim2.new(1, 0, 0, 35)
        }):Play()
    end
    
    -- Button Click Animation
    function self:CreateClickAnimation(button)
        button.MouseButton1Down:Connect(function()
            TweenService:Create(button, TweenInfo.new(0.1), {
                Size = UDim2.new(0.95, 0, 0.95, 0)
            }):Play()
        end)
        
        button.MouseButton1Up:Connect(function()
            TweenService:Create(button, TweenInfo.new(0.1), {
                Size = UDim2.new(1, 0, 1, 0)
            }):Play()
        end)
    end
    
    -- Slider Animation
    function self:AnimateSlider(slider, value)
        TweenService:Create(slider, TweenInfo.new(0.2), {
            Size = UDim2.new(value, 0, 1, 0)
        }):Play()
    end
    
    -- Window Opening Animation
    function self:AnimateWindowOpening()
        self.Main.Size = UDim2.new(0, 0, 0, 0)
        self.Main.BackgroundTransparency = 1
        
        TweenService:Create(self.Main, TweenInfo.new(0.4, Enum.EasingStyle.Back), {
            Size = UDim2.new(0, 800, 0, 600),
            BackgroundTransparency = 0
        }):Play()
    end
end

function Library:CreateContextMenu()
    local ContextMenu = {
        Visible = false,
        Items = {}
    }
    
    -- Context Menu Container
    ContextMenu.Container = Instance.new("Frame")
    ContextMenu.Container.Size = UDim2.new(0, 150, 0, 0)
    ContextMenu.Container.BackgroundColor3 = self.Theme.Section
    ContextMenu.Container.BackgroundTransparency = 0.1
    ContextMenu.Container.Visible = false
    ContextMenu.Container.ZIndex = 100
    ContextMenu.Container.Parent = self.GUI
    
    -- Menu Items Layout
    local Layout = Instance.new("UIListLayout")
    Layout.Padding = UDim.new(0, 2)
    Layout.Parent = ContextMenu.Container
    
    function ContextMenu:AddItem(name, callback)
        local Item = Instance.new("TextButton")
        Item.Size = UDim2.new(1, 0, 0, 30)
        Item.BackgroundColor3 = self.Theme.Element
        Item.BackgroundTransparency = 0.7
        Item.Text = name
        Item.TextColor3 = self.Theme.Text
        Item.TextSize = 13
        Item.Font = self.Fonts.Regular
        Item.ZIndex = 101
        Item.Parent = self.Container
        
        -- Hover Effect
        Item.MouseEnter:Connect(function()
            TweenService:Create(Item, TweenInfo.new(0.2), {
                BackgroundTransparency = 0.5,
                TextColor3 = self.Theme.Accent
            }):Play()
        end)
        
        Item.MouseLeave:Connect(function()
            TweenService:Create(Item, TweenInfo.new(0.2), {
                BackgroundTransparency = 0.7,
                TextColor3 = self.Theme.Text
            }):Play()
        end)
        
        Item.MouseButton1Click:Connect(function()
            self:Hide()
            callback()
        end)
        
        table.insert(self.Items, Item)
        self.Container.Size = UDim2.new(0, 150, 0, #self.Items * 32)
    end
    
    function ContextMenu:Show(position)
        self.Container.Position = UDim2.new(0, position.X, 0, position.Y)
        self.Container.Size = UDim2.new(0, 150, 0, 0)
        self.Container.Visible = true
        self.Visible = true
        
        -- Animation
        TweenService:Create(self.Container, TweenInfo.new(0.2), {
            Size = UDim2.new(0, 150, 0, #self.Items * 32)
        }):Play()
    end
    
    function ContextMenu:Hide()
        TweenService:Create(self.Container, TweenInfo.new(0.2), {
            Size = UDim2.new(0, 150, 0, 0)
        }):Play()
        
        task.delay(0.2, function()
            self.Container.Visible = false
            self.Visible = false
        end)
    end
    
    -- Right Click Detection
    UserInputService.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton2 then
            local mousePos = UserInputService:GetMouseLocation()
            ContextMenu:Show(mousePos)
        elseif input.UserInputType == Enum.UserInputType.MouseButton1 and ContextMenu.Visible then
            ContextMenu:Hide()
        end
    end)
    
    return ContextMenu
end

function Library:CreateTooltipSystem()
    local TooltipSystem = {
        ActiveTooltip = nil
    }
    
    -- Tooltip Container
    TooltipSystem.Container = Instance.new("Frame")
    TooltipSystem.Container.Size = UDim2.new(0, 200, 0, 0)
    TooltipSystem.Container.BackgroundColor3 = self.Theme.Section
    TooltipSystem.Container.BackgroundTransparency = 0.1
    TooltipSystem.Container.Visible = false
    TooltipSystem.Container.ZIndex = 1000
    TooltipSystem.Container.Parent = self.GUI
    
    -- Tooltip Text
    TooltipSystem.Text = Instance.new("TextLabel")
    TooltipSystem.Text.Size = UDim2.new(1, -20, 1, 0)
    TooltipSystem.Text.Position = UDim2.new(0, 10, 0, 0)
    TooltipSystem.Text.BackgroundTransparency = 1
    TooltipSystem.Text.TextColor3 = self.Theme.Text
    TooltipSystem.Text.TextSize = 13
    TooltipSystem.Text.Font = self.Fonts.Regular
    TooltipSystem.Text.TextWrapped = true
    TooltipSystem.Text.ZIndex = 1001
    TooltipSystem.Text.Parent = TooltipSystem.Container
    
    -- Premium Accent Line
    local AccentLine = Instance.new("Frame")
    AccentLine.Size = UDim2.new(0, 2, 1, 0)
    AccentLine.BackgroundColor3 = self.Theme.Accent
    AccentLine.BorderSizePixel = 0
    AccentLine.ZIndex = 1001
    AccentLine.Parent = TooltipSystem.Container
    
    function TooltipSystem:Show(text, position)
        self.Text.Text = text
        
        -- Calculate text bounds
        local textBounds = self.Text.TextBounds
        local tooltipHeight = textBounds.Y + 20
        
        self.Container.Size = UDim2.new(0, 0, 0, tooltipHeight)
        self.Container.Position = UDim2.new(0, position.X + 20, 0, position.Y - tooltipHeight/2)
        self.Container.Visible = true
        
        -- Animation
        TweenService:Create(self.Container, TweenInfo.new(0.2), {
            Size = UDim2.new(0, 200, 0, tooltipHeight)
        }):Play()
        
        -- Glow Effect
        local Glow = Instance.new("ImageLabel")
        Glow.Size = UDim2.new(1, 40, 1, 40)
        Glow.Position = UDim2.new(0, -20, 0, -20)
        Glow.BackgroundTransparency = 1
        Glow.Image = "rbxassetid://7733964742"
        Glow.ImageColor3 = self.Theme.Accent
        Glow.ImageTransparency = 0.9
        Glow.ZIndex = 999
        Glow.Parent = self.Container
    end
    
    function TooltipSystem:Hide()
        TweenService:Create(self.Container, TweenInfo.new(0.2), {
            Size = UDim2.new(0, 0, 0, self.Container.AbsoluteSize.Y)
        }):Play()
        
        task.delay(0.2, function()
            self.Container.Visible = false
        end)
    end
    
    -- Add tooltip to element
    function self:AddTooltip(element, text)
        element.MouseEnter:Connect(function()
            local mousePos = UserInputService:GetMouseLocation()
            TooltipSystem:Show(text, mousePos)
        end)
        
        element.MouseLeave:Connect(function()
            TooltipSystem:Hide()
        end)
    end
    
    return TooltipSystem
end

function Library:CreateSearchSystem()
    local SearchSystem = {
        Active = false,
        Results = {}
    }
    
    -- Search Container
    SearchSystem.Container = Instance.new("Frame")
    SearchSystem.Container.Size = UDim2.new(0, 300, 0, 400)
    SearchSystem.Container.Position = UDim2.new(0.5, -150, 0.5, -200)
    SearchSystem.Container.BackgroundColor3 = self.Theme.Section
    SearchSystem.Container.BackgroundTransparency = 0.1
    SearchSystem.Container.Visible = false
    SearchSystem.Container.ZIndex = 1000
    SearchSystem.Container.Parent = self.GUI
    
    -- Search Bar
    SearchSystem.SearchBar = Instance.new("TextBox")
    SearchSystem.SearchBar.Size = UDim2.new(1, -20, 0, 35)
    SearchSystem.SearchBar.Position = UDim2.new(0, 10, 0, 10)
    SearchSystem.SearchBar.BackgroundColor3 = self.Theme.Element
    SearchSystem.SearchBar.BackgroundTransparency = 0.7
    SearchSystem.SearchBar.PlaceholderText = "Search..."
    SearchSystem.SearchBar.Text = ""
    SearchSystem.SearchBar.TextColor3 = self.Theme.Text
    SearchSystem.SearchBar.PlaceholderColor3 = self.Theme.DarkGray
    SearchSystem.SearchBar.TextSize = 14
    SearchSystem.SearchBar.Font = self.Fonts.Regular
    SearchSystem.SearchBar.ZIndex = 1001
    SearchSystem.SearchBar.Parent = SearchSystem.Container
    
    -- Results Container
    SearchSystem.Results = Instance.new("ScrollingFrame")
    SearchSystem.Results.Size = UDim2.new(1, -20, 1, -55)
    SearchSystem.Results.Position = UDim2.new(0, 10, 0, 55)
    SearchSystem.Results.BackgroundTransparency = 1
    SearchSystem.Results.ScrollBarThickness = 2
    SearchSystem.Results.ZIndex = 1001
    SearchSystem.Results.Parent = SearchSystem.Container
    
    -- Results Layout
    local Layout = Instance.new("UIListLayout")
    Layout.Padding = UDim.new(0, 5)
    Layout.Parent = SearchSystem.Results
    
    function SearchSystem:CreateResult(text, callback)
        local Result = Instance.new("TextButton")
        Result.Size = UDim2.new(1, 0, 0, 35)
        Result.BackgroundColor3 = self.Theme.Element
        Result.BackgroundTransparency = 0.7
        Result.Text = text
        Result.TextColor3 = self.Theme.Text
        Result.TextSize = 13
        Result.Font = self.Fonts.Regular
        Result.ZIndex = 1002
        Result.Parent = self.Results
        
        -- Hover Effect
        Result.MouseEnter:Connect(function()
            TweenService:Create(Result, TweenInfo.new(0.2), {
                BackgroundTransparency = 0.5,
                TextColor3 = self.Theme.Accent
            }):Play()
        end)
        
        Result.MouseLeave:Connect(function()
            TweenService:Create(Result, TweenInfo.new(0.2), {
                BackgroundTransparency = 0.7,
                TextColor3 = self.Theme.Text
            }):Play()
        end)
        
        Result.MouseButton1Click:Connect(function()
            self:Hide()
            callback()
        end)
        
        return Result
    end
    
    function SearchSystem:Show()
        self.Container.Size = UDim2.new(0, 0, 0, 400)
        self.Container.Visible = true
        self.Active = true
        
        TweenService:Create(self.Container, TweenInfo.new(0.3), {
            Size = UDim2.new(0, 300, 0, 400)
        }):Play()
        
        self.SearchBar:CaptureFocus()
    end
    
    function SearchSystem:Hide()
        TweenService:Create(self.Container, TweenInfo.new(0.3), {
            Size = UDim2.new(0, 0, 0, 400)
        }):Play()
        
        task.delay(0.3, function()
            self.Container.Visible = false
            self.Active = false
        end)
    end
    
    -- Search Logic
    SearchSystem.SearchBar:GetPropertyChangedSignal("Text"):Connect(function()
        local query = SearchSystem.SearchBar.Text:lower()
        -- Implement your search logic here
    end)
    
    -- Toggle Search with CTRL + F
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == Enum.KeyCode.F and UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
            if SearchSystem.Active then
                SearchSystem:Hide()
            else
                SearchSystem:Show()
            end
        end
    end)
    
    return SearchSystem
end

function Library:InitializeWindowSnapping()
    local SnapSystem = {
        SnapPoints = {},
        SnapThreshold = 20,
        Dragging = false
    }
    
    -- Create Snap Indicators
    function SnapSystem:CreateSnapIndicator()
        local Indicator = Instance.new("Frame")
        Indicator.Size = UDim2.new(0, 2, 1, 0)
        Indicator.BackgroundColor3 = self.Theme.Accent
        Indicator.BackgroundTransparency = 0.5
        Indicator.Visible = false
        Indicator.ZIndex = 1000
        Indicator.Parent = self.GUI
        
        return Indicator
    end
    
    -- Create Snap Points
    local LeftSnap = SnapSystem:CreateSnapIndicator()
    local RightSnap = SnapSystem:CreateSnapIndicator()
    local CenterSnap = SnapSystem:CreateSnapIndicator()
    
    -- Window Dragging Logic
    self.TopBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            SnapSystem.Dragging = true
            local dragStart = input.Position
            local startPos = self.Main.Position
            
            -- Create Drag Connection
            local dragConnection
            dragConnection = UserInputService.InputChanged:Connect(function(dragInput)
                if dragInput.UserInputType == Enum.UserInputType.MouseMovement then
                    local delta = dragInput.Position - dragStart
                    local targetPos = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
                    
                    -- Check Snap Points
                    local screenSize = workspace.CurrentCamera.ViewportSize
                    local windowSize = self.Main.AbsoluteSize
                    
                    -- Left Snap
                    if math.abs(targetPos.X.Offset) < SnapSystem.SnapThreshold then
                        targetPos = UDim2.new(0, 0, targetPos.Y.Scale, targetPos.Y.Offset)
                        LeftSnap.Visible = true
                        LeftSnap.Position = UDim2.new(0, 0, 0, 0)
                    else
                        LeftSnap.Visible = false
                    end
                    
                    -- Right Snap
                    if math.abs((screenSize.X - windowSize.X) - targetPos.X.Offset) < SnapSystem.SnapThreshold then
                        targetPos = UDim2.new(0, screenSize.X - windowSize.X, targetPos.Y.Scale, targetPos.Y.Offset)
                        RightSnap.Visible = true
                        RightSnap.Position = UDim2.new(1, -2, 0, 0)
                    else
                        RightSnap.Visible = false
                    end
                    
                    -- Center Snap
                    local centerOffset = (screenSize.X - windowSize.X) / 2
                    if math.abs(centerOffset - targetPos.X.Offset) < SnapSystem.SnapThreshold then
                        targetPos = UDim2.new(0, centerOffset, targetPos.Y.Scale, targetPos.Y.Offset)
                        CenterSnap.Visible = true
                        CenterSnap.Position = UDim2.new(0.5, -1, 0, 0)
                    else
                        CenterSnap.Visible = false
                    end
                    
                    -- Apply Position
                    self.Main.Position = targetPos
                end
            end)
            
            -- Cleanup
            UserInputService.InputEnded:Connect(function(endInput)
                if endInput.UserInputType == Enum.UserInputType.MouseButton1 then
                    SnapSystem.Dragging = false
                    dragConnection:Disconnect()
                    LeftSnap.Visible = false
                    RightSnap.Visible = false
                    CenterSnap.Visible = false
                end
            end)
        end
    end)
    
    -- Window Resize Logic
    local ResizeButton = Instance.new("TextButton")
    ResizeButton.Size = UDim2.new(0, 20, 0, 20)
    ResizeButton.Position = UDim2.new(1, -20, 1, -20)
    ResizeButton.Text = ""
    ResizeButton.BackgroundTransparency = 1
    ResizeButton.Parent = self.Main
    
    local Resizing = false
    local MinSize = Vector2.new(400, 300)
    
    ResizeButton.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            Resizing = true
            local startSize = self.Main.Size
            local startPos = input.Position
            
            local resizeConnection
            resizeConnection = UserInputService.InputChanged:Connect(function(dragInput)
                if dragInput.UserInputType == Enum.UserInputType.MouseMovement then
                    local delta = dragInput.Position - startPos
                    local targetSize = UDim2.new(
                        startSize.X.Scale,
                        math.max(MinSize.X, startSize.X.Offset + delta.X),
                        startSize.Y.Scale,
                        math.max(MinSize.Y, startSize.Y.Offset + delta.Y)
                    )
                    self.Main.Size = targetSize
                end
            end)
            
            UserInputService.InputEnded:Connect(function(endInput)
                if endInput.UserInputType == Enum.UserInputType.MouseButton1 then
                    Resizing = false
                    resizeConnection:Disconnect()
                end
            end)
        end
    end)
end


function Library:CreateWatermark()
    local Watermark = {
        Visible = true,
        Text = "gamesense | %username% | %fps% fps | %ping% ms | %time%"
    }
    
    -- Watermark Container
    Watermark.Container = Instance.new("Frame")
    Watermark.Container.Size = UDim2.new(0, 0, 0, 20)
    Watermark.Container.Position = UDim2.new(0, 10, 0, 10)
    Watermark.Container.BackgroundColor3 = self.Theme.Section
    Watermark.Container.BackgroundTransparency = 0.1
    Watermark.Container.Parent = self.GUI
    
    -- Accent Line
    local AccentLine = Instance.new("Frame")
    AccentLine.Size = UDim2.new(0, 1, 1, 0)
    AccentLine.BackgroundColor3 = self.Theme.Accent
    AccentLine.BorderSizePixel = 0
    AccentLine.Parent = Watermark.Container
    
    -- Watermark Text
    Watermark.Label = Instance.new("TextLabel")
    Watermark.Label.Size = UDim2.new(1, -10, 1, 0)
    Watermark.Label.Position = UDim2.new(0, 5, 0, 0)
    Watermark.Label.BackgroundTransparency = 1
    Watermark.Label.TextColor3 = self.Theme.Text
    Watermark.Label.TextSize = 13
    Watermark.Label.Font = self.Fonts.Regular
    Watermark.Label.TextXAlignment = Enum.TextXAlignment.Left
    Watermark.Label.Parent = Watermark.Container
    
    -- Update Function
    function Watermark:Update()
        local text = self.Text
        text = text:gsub("%%username%%", Players.LocalPlayer.Name)
        text = text:gsub("%%fps%%", tostring(math.floor(1/RunService.RenderStepped:Wait())))
        text = text:gsub("%%ping%%", tostring(math.floor(Players.LocalPlayer:GetNetworkPing() * 1000)))
        text = text:gsub("%%time%%", os.date("%X"))
        
        self.Label.Text = text
        
        -- Auto-size container
        local textBounds = self.Label.TextBounds
        TweenService:Create(self.Container, TweenInfo.new(0.2), {
            Size = UDim2.new(0, textBounds.X + 15, 0, 20)
        }):Play()
    end
    
    -- Toggle Function
    function Watermark:Toggle()
        self.Visible = not self.Visible
        self.Container.Visible = self.Visible
    end
    
    -- Animation
    local function AnimateAccent()
        while true do
            TweenService:Create(AccentLine, TweenInfo.new(1.5), {
                BackgroundTransparency = 0.8
            }):Play()
            wait(1.5)
            TweenService:Create(AccentLine, TweenInfo.new(1.5), {
                BackgroundTransparency = 0
            }):Play()
            wait(1.5)
        end
    end
    coroutine.wrap(AnimateAccent)()
    
    -- Update Loop
    RunService.RenderStepped:Connect(function()
        if Watermark.Visible then
            Watermark:Update()
        end
    end)
    
    return Watermark
end

function Library:InitializeThemeSystem()
    local ThemeSystem = {
        Themes = {
            Default = {
                Accent = Color3.fromRGB(0, 170, 255),
                AccentDark = Color3.fromRGB(0, 140, 210),
                Background = Color3.fromRGB(25, 25, 25),
                Section = Color3.fromRGB(30, 30, 30),
                Element = Color3.fromRGB(35, 35, 35),
                Text = Color3.fromRGB(255, 255, 255),
                DarkText = Color3.fromRGB(175, 175, 175),
                Gray = Color3.fromRGB(130, 130, 130),
                DarkGray = Color3.fromRGB(70, 70, 70)
            },
            Light = {
                Accent = Color3.fromRGB(0, 170, 255),
                AccentDark = Color3.fromRGB(0, 140, 210),
                Background = Color3.fromRGB(240, 240, 240),
                Section = Color3.fromRGB(230, 230, 230),
                Element = Color3.fromRGB(220, 220, 220),
                Text = Color3.fromRGB(25, 25, 25),
                DarkText = Color3.fromRGB(75, 75, 75),
                Gray = Color3.fromRGB(130, 130, 130),
                DarkGray = Color3.fromRGB(180, 180, 180)
            },
            Discord = {
                Accent = Color3.fromRGB(114, 137, 218),
                AccentDark = Color3.fromRGB(94, 117, 198),
                Background = Color3.fromRGB(54, 57, 63),
                Section = Color3.fromRGB(47, 49, 54),
                Element = Color3.fromRGB(41, 43, 47),
                Text = Color3.fromRGB(255, 255, 255),
                DarkText = Color3.fromRGB(185, 185, 185),
                Gray = Color3.fromRGB(130, 130, 130),
                DarkGray = Color3.fromRGB(70, 70, 70)
            }
        }
    }
    
    function ThemeSystem:ApplyTheme(theme)
        -- Animate Theme Change
        for element, properties in pairs(self.Elements) do
            for property, color in pairs(properties) do
                TweenService:Create(element, TweenInfo.new(0.3), {
                    [property] = theme[color]
                }):Play()
            end
        end
        
        -- Update Current Theme
        self.CurrentTheme = theme
        
        -- Save Theme Preference
        if self.SaveTheme then
            writefile("GameSense/theme.json", game:GetService("HttpService"):JSONEncode({
                ThemeName = theme
            }))
        end
    end
    
    function ThemeSystem:CreateThemeCustomizer()
        local CustomizerSection = self:CreateSection(self.Tabs.Settings.Content, "THEME CUSTOMIZER")
        
        -- Theme Selector
        local ThemeDropdown = self:CreateDropdown(CustomizerSection, "Theme", table.keys(self.Themes))
        ThemeDropdown.OnChanged:Connect(function(theme)
            self:ApplyTheme(self.Themes[theme])
        end)
        
        -- Color Pickers
        for colorName, _ in pairs(self.Themes.Default) do
            local ColorPicker = self:CreateColorPicker(CustomizerSection, colorName)
            ColorPicker.OnChanged:Connect(function(color)
                self.CurrentTheme[colorName] = color
                self:ApplyTheme(self.CurrentTheme)
            end)
        end
        
        -- Save Theme Button
        local SaveButton = self:CreateButton(CustomizerSection, "Save Theme")
        SaveButton.OnClick:Connect(function()
            local themeName = "Custom_" .. os.time()
            self.Themes[themeName] = table.clone(self.CurrentTheme)
            ThemeDropdown:AddOption(themeName)
            self:CreateNotification("Success", "Theme saved successfully!", "success")
        end)
    end
    
    -- Initialize Theme System
    function ThemeSystem:Initialize()
        -- Load Saved Theme
        if isfile("GameSense/theme.json") then
            local themeData = game:GetService("HttpService"):JSONDecode(readfile("GameSense/theme.json"))
            if self.Themes[themeData.ThemeName] then
                self:ApplyTheme(self.Themes[themeData.ThemeName])
            end
        end
        
        -- Create Theme Customizer
        self:CreateThemeCustomizer()
    end
    
    return ThemeSystem
end

function Library:InitializeKeybindSystem()
    local KeybindSystem = {
        Binds = {},
        Listening = false,
        CurrentBind = nil
    }
    
    -- Keybind Container
    KeybindSystem.Container = Instance.new("Frame")
    KeybindSystem.Container.Size = UDim2.new(0, 200, 0, 0)
    KeybindSystem.Container.Position = UDim2.new(1, -210, 0, 10)
    KeybindSystem.Container.BackgroundColor3 = self.Theme.Section
    KeybindSystem.Container.BackgroundTransparency = 0.1
    KeybindSystem.Container.ClipsDescendants = true
    KeybindSystem.Container.Parent = self.GUI
    
    -- Keybinds Layout
    local Layout = Instance.new("UIListLayout")
    Layout.Padding = UDim.new(0, 5)
    Layout.Parent = KeybindSystem.Container
    
    function KeybindSystem:CreateBind(name, defaultKey, callback)
        local Bind = {
            Name = name,
            Key = defaultKey,
            Callback = callback,
            Active = true
        }
        
        -- Bind Element
        Bind.Element = Instance.new("Frame")
        Bind.Element.Size = UDim2.new(1, 0, 0, 30)
        Bind.Element.BackgroundColor3 = self.Theme.Element
        Bind.Element.BackgroundTransparency = 0.7
        Bind.Element.Parent = self.Container
        
        -- Bind Name
        local BindName = Instance.new("TextLabel")
        BindName.Size = UDim2.new(1, -80, 1, 0)
        BindName.Position = UDim2.new(0, 10, 0, 0)
        BindName.BackgroundTransparency = 1
        BindName.Text = name
        BindName.TextColor3 = self.Theme.Text
        BindName.TextSize = 13
        BindName.Font = self.Fonts.Regular
        BindName.TextXAlignment = Enum.TextXAlignment.Left
        BindName.Parent = Bind.Element
        
        -- Key Display
        Bind.Display = Instance.new("TextButton")
        Bind.Display.Size = UDim2.new(0, 60, 0, 20)
        Bind.Display.Position = UDim2.new(1, -70, 0.5, -10)
        Bind.Display.BackgroundColor3 = self.Theme.Section
        Bind.Display.BackgroundTransparency = 0.5
        Bind.Display.Text = defaultKey.Name
        Bind.Display.TextColor3 = self.Theme.Accent
        Bind.Display.TextSize = 13
        Bind.Display.Font = self.Fonts.Bold
        Bind.Display.Parent = Bind.Element
        
        -- Change Keybind
        Bind.Display.MouseButton1Click:Connect(function()
            if self.Listening then return end
            
            self.Listening = true
            self.CurrentBind = Bind
            Bind.Display.Text = "..."
            
            local input = UserInputService.InputBegan:Wait()
            
            if input.UserInputType == Enum.UserInputType.Keyboard then
                Bind.Key = input.KeyCode
                Bind.Display.Text = input.KeyCode.Name
            end
            
            self.Listening = false
            self.CurrentBind = nil
        end)
        
        -- Input Detection
        UserInputService.InputBegan:Connect(function(input)
            if not self.Listening and input.UserInputType == Enum.UserInputType.Keyboard then
                if input.KeyCode == Bind.Key and Bind.Active then
                    Bind.Callback()
                end
            end
        end)
        
        table.insert(self.Binds, Bind)
        self:UpdateContainer()
        
        return Bind
    end
    
    function KeybindSystem:UpdateContainer()
        local height = #self.Binds * 35
        TweenService:Create(self.Container, TweenInfo.new(0.3), {
            Size = UDim2.new(0, 200, 0, height)
        }):Play()
    end
    
    function KeybindSystem:SaveBinds()
        local bindData = {}
        for _, bind in ipairs(self.Binds) do
            bindData[bind.Name] = bind.Key.Name
        end
        
        writefile("GameSense/keybinds.json", game:GetService("HttpService"):JSONEncode(bindData))
    end
    
    function KeybindSystem:LoadBinds()
        if isfile("GameSense/keybinds.json") then
            local bindData = game:GetService("HttpService"):JSONDecode(readfile("GameSense/keybinds.json"))
            
            for _, bind in ipairs(self.Binds) do
                if bindData[bind.Name] then
                    bind.Key = Enum.KeyCode[bindData[bind.Name]]
                    bind.Display.Text = bindData[bind.Name]
                end
            end
        end
    end
    
    return KeybindSystem
end

function Library:InitializeProfileSystem()
    local ProfileSystem = {
        Profiles = {},
        CurrentProfile = nil,
        SavePath = "GameSense/Profiles/"
    }
    
    -- Create Profile Section
    local ProfileSection = self:CreateSection(self.Tabs.Settings.Content, "PROFILES")
    
    -- Profile Name Input
    local ProfileName = Instance.new("TextBox")
    ProfileName.Size = UDim2.new(1, -20, 0, 30)
    ProfileName.BackgroundColor3 = self.Theme.Element
    ProfileName.BackgroundTransparency = 0.7
    ProfileName.Text = ""
    ProfileName.PlaceholderText = "Profile Name"
    ProfileName.TextColor3 = self.Theme.Text
    ProfileName.PlaceholderColor3 = self.Theme.DarkGray
    ProfileName.TextSize = 13
    ProfileName.Font = self.Fonts.Regular
    ProfileName.Parent = ProfileSection
    
    -- Profile List
    local ProfileList = Instance.new("ScrollingFrame")
    ProfileList.Size = UDim2.new(1, -20, 0, 150)
    ProfileList.BackgroundTransparency = 1
    ProfileList.ScrollBarThickness = 2
    ProfileList.Parent = ProfileSection
    
    local Layout = Instance.new("UIListLayout")
    Layout.Padding = UDim.new(0, 5)
    Layout.Parent = ProfileList
    
    function ProfileSystem:CreateProfile(name)
        local profile = {
            Name = name,
            Settings = {},
            Keybinds = {},
            Theme = table.clone(self.CurrentTheme)
        }
        
        -- Save current settings
        for _, element in pairs(self.Elements) do
            if element.Save then
                profile.Settings[element.ID] = element:Save()
            end
        end
        
        -- Save keybinds
        for _, bind in pairs(self.KeybindSystem.Binds) do
            profile.Keybinds[bind.Name] = bind.Key.Name
        end
        
        -- Create Profile Button
        local ProfileButton = Instance.new("TextButton")
        ProfileButton.Size = UDim2.new(1, 0, 0, 30)
        ProfileButton.BackgroundColor3 = self.Theme.Element
        ProfileButton.BackgroundTransparency = 0.7
        ProfileButton.Text = name
        ProfileButton.TextColor3 = self.Theme.Text
        ProfileButton.TextSize = 13
        ProfileButton.Font = self.Fonts.Regular
        ProfileButton.Parent = ProfileList
        
        -- Load Profile
        ProfileButton.MouseButton1Click:Connect(function()
            self:LoadProfile(profile)
        end)
        
        -- Context Menu
        ProfileButton.MouseButton2Click:Connect(function()
            self.ContextMenu:Show({
                {
                    Text = "Load Profile",
                    Callback = function()
                        self:LoadProfile(profile)
                    end
                },
                {
                    Text = "Update Profile",
                    Callback = function()
                        self:UpdateProfile(profile)
                    end
                },
                {
                    Text = "Delete Profile",
                    Callback = function()
                        self:DeleteProfile(profile)
                    end
                }
            })
        end)
        
        table.insert(self.Profiles, profile)
        self:SaveProfiles()
        
        return profile
    end
    
    function ProfileSystem:LoadProfile(profile)
        -- Load settings
        for id, value in pairs(profile.Settings) do
            local element = self:GetElementByID(id)
            if element and element.Load then
                element:Load(value)
            end
        end
        
        -- Load keybinds
        for name, key in pairs(profile.Keybinds) do
            local bind = self.KeybindSystem:GetBindByName(name)
            if bind then
                bind.Key = Enum.KeyCode[key]
                bind.Display.Text = key
            end
        end
        
        -- Load theme
        self:ApplyTheme(profile.Theme)
        
        self.CurrentProfile = profile
        self:CreateNotification("Success", "Profile loaded successfully!", "success")
    end
    
    function ProfileSystem:SaveProfiles()
        local profileData = {}
        for _, profile in ipairs(self.Profiles) do
            profileData[profile.Name] = {
                Settings = profile.Settings,
                Keybinds = profile.Keybinds,
                Theme = profile.Theme
            }
        end
        
        writefile(self.SavePath .. "profiles.json", game:GetService("HttpService"):JSONEncode(profileData))
    end
    
    function ProfileSystem:LoadProfiles()
        if isfile(self.SavePath .. "profiles.json") then
            local profileData = game:GetService("HttpService"):JSONDecode(readfile(self.SavePath .. "profiles.json"))
            
            for name, data in pairs(profileData) do
                local profile = self:CreateProfile(name)
                profile.Settings = data.Settings
                profile.Keybinds = data.Keybinds
                profile.Theme = data.Theme
            end
        end
    end
    
    return ProfileSystem
end

function Library:InitializeAnalytics()
    local Analytics = {
        Data = {
            SessionStart = os.time(),
            ButtonClicks = 0,
            TogglesFlipped = 0,
            SliderChanges = 0,
            TimeSpent = 0,
            MostUsedFeatures = {},
            FeatureUsageTime = {}
        },
        Tracking = true
    }
    
    -- Analytics Dashboard
    function Analytics:CreateDashboard()
        local Dashboard = Instance.new("Frame")
        Dashboard.Size = UDim2.new(0, 300, 0, 400)
        Dashboard.Position = UDim2.new(0.5, -150, 0.5, -200)
        Dashboard.BackgroundColor3 = self.Theme.Section
        Dashboard.BackgroundTransparency = 0.1
        Dashboard.Visible = false
        Dashboard.Parent = self.GUI
        
        -- Usage Statistics
        local function CreateStat(name, value, position)
            local Stat = Instance.new("Frame")
            Stat.Size = UDim2.new(0.5, -10, 0, 80)
            Stat.Position = position
            Stat.BackgroundColor3 = self.Theme.Element
            Stat.BackgroundTransparency = 0.7
            Stat.Parent = Dashboard
            
            local Name = Instance.new("TextLabel")
            Name.Size = UDim2.new(1, 0, 0, 20)
            Name.BackgroundTransparency = 1
            Name.Text = name
            Name.TextColor3 = self.Theme.Text
            Name.TextSize = 13
            Name.Font = self.Fonts.Regular
            Name.Parent = Stat
            
            local Value = Instance.new("TextLabel")
            Value.Size = UDim2.new(1, 0, 0, 40)
            Value.Position = UDim2.new(0, 0, 0.5, -20)
            Value.BackgroundTransparency = 1
            Value.Text = value
            Value.TextColor3 = self.Theme.Accent
            Value.TextSize = 24
            Value.Font = self.Fonts.Bold
            Value.Parent = Stat
            
            return Value
        end
        
        local Stats = {
            TimeSpent = CreateStat("Time Spent", "0h 0m", UDim2.new(0, 5, 0, 5)),
            ButtonClicks = CreateStat("Button Clicks", "0", UDim2.new(0.5, 5, 0, 5)),
            TogglesFlipped = CreateStat("Toggles Flipped", "0", UDim2.new(0, 5, 0, 90)),
            SliderChanges = CreateStat("Slider Changes", "0", UDim2.new(0.5, 5, 0, 90))
        }
        
        -- Update Loop
        RunService.RenderStepped:Connect(function()
            if self.Tracking then
                self.Data.TimeSpent = os.time() - self.Data.SessionStart
                local hours = math.floor(self.Data.TimeSpent / 3600)
                local minutes = math.floor((self.Data.TimeSpent % 3600) / 60)
                Stats.TimeSpent.Text = string.format("%dh %dm", hours, minutes)
                Stats.ButtonClicks.Text = tostring(self.Data.ButtonClicks)
                Stats.TogglesFlipped.Text = tostring(self.Data.TogglesFlipped)
                Stats.SliderChanges.Text = tostring(self.Data.SliderChanges)
            end
        end)
        
        return Dashboard
    end
    
    -- Track Element Usage
    function Analytics:TrackElement(element, type)
        if not self.Data.MostUsedFeatures[element.Name] then
            self.Data.MostUsedFeatures[element.Name] = 0
        end
        
        if not self.Data.FeatureUsageTime[element.Name] then
            self.Data.FeatureUsageTime[element.Name] = 0
        end
        
        local startTime = os.time()
        
        element.MouseButton1Click:Connect(function()
            if self.Tracking then
                if type == "Button" then
                    self.Data.ButtonClicks += 1
                elseif type == "Toggle" then
                    self.Data.TogglesFlipped += 1
                end
                
                self.Data.MostUsedFeatures[element.Name] += 1
                self.Data.FeatureUsageTime[element.Name] += os.time() - startTime
                startTime = os.time()
            end
        end)
    end
    
    -- Save Analytics Data
    function Analytics:SaveData()
        writefile("GameSense/analytics.json", game:GetService("HttpService"):JSONEncode(self.Data))
    end
    
    -- Load Analytics Data
    function Analytics:LoadData()
        if isfile("GameSense/analytics.json") then
            self.Data = game:GetService("HttpService"):JSONDecode(readfile("GameSense/analytics.json"))
            self.Data.SessionStart = os.time()
        end
    end
    
    return Analytics
end

function Library:InitializePerformanceSystem()
    local Performance = {
        Settings = {
            AnimationFPS = 60,
            RenderDistance = 1000,
            ShadowQuality = "High",
            AntiAliasing = true,
            ElementCulling = true,
            DynamicRendering = true
        },
        Monitoring = {
            FPS = 0,
            FrameTimes = {},
            MemoryUsage = 0,
            NetworkLatency = 0
        }
    }
    
    -- Performance Monitor
    function Performance:CreateMonitor()
        local Monitor = Instance.new("Frame")
        Monitor.Size = UDim2.new(0, 200, 0, 100)
        Monitor.Position = UDim2.new(1, -210, 0, 10)
        Monitor.BackgroundColor3 = self.Theme.Section
        Monitor.BackgroundTransparency = 0.1
        Monitor.Parent = self.GUI
        
        -- FPS Counter
        local FPS = Instance.new("TextLabel")
        FPS.Size = UDim2.new(1, 0, 0, 25)
        FPS.BackgroundTransparency = 1
        FPS.Text = "60 FPS"
        FPS.TextColor3 = self.Theme.Text
        FPS.TextSize = 14
        FPS.Font = self.Fonts.Bold
        FPS.Parent = Monitor
        
        -- Memory Usage
        local Memory = Instance.new("TextLabel")
        Memory.Size = UDim2.new(1, 0, 0, 25)
        Memory.Position = UDim2.new(0, 0, 0, 25)
        Memory.BackgroundTransparency = 1
        Memory.Text = "0 MB"
        Memory.TextColor3 = self.Theme.Text
        Memory.TextSize = 14
        Memory.Font = self.Fonts.Regular
        Memory.Parent = Monitor
        
        -- Network Latency
        local Ping = Instance.new("TextLabel")
        Ping.Size = UDim2.new(1, 0, 0, 25)
        Ping.Position = UDim2.new(0, 0, 0, 50)
        Ping.BackgroundTransparency = 1
        Ping.Text = "0 ms"
        Ping.TextColor3 = self.Theme.Text
        Ping.TextSize = 14
        Ping.Font = self.Fonts.Regular
        Ping.Parent = Monitor
        
        -- Update Loop
        local lastFrame = os.clock()
        RunService.RenderStepped:Connect(function()
            -- Calculate FPS
            local now = os.clock()
            local frameTime = now - lastFrame
            lastFrame = now
            
            table.insert(self.Monitoring.FrameTimes, frameTime)
            if #self.Monitoring.FrameTimes > 60 then
                table.remove(self.Monitoring.FrameTimes, 1)
            end
            
            local avgFrameTime = 0
            for _, time in ipairs(self.Monitoring.FrameTimes) do
                avgFrameTime += time
            end
            avgFrameTime /= #self.Monitoring.FrameTimes
            
            self.Monitoring.FPS = math.round(1 / avgFrameTime)
            FPS.Text = string.format("%d FPS", self.Monitoring.FPS)
            
            -- Update Memory Usage
            self.Monitoring.MemoryUsage = math.round(game:GetService("Stats"):GetTotalMemoryUsageMb())
            Memory.Text = string.format("%d MB", self.Monitoring.MemoryUsage)
            
            -- Update Network Latency
            self.Monitoring.NetworkLatency = math.round(Players.LocalPlayer:GetNetworkPing() * 1000)
            Ping.Text = string.format("%d ms", self.Monitoring.NetworkLatency)
        end)
    end
    
    -- Performance Optimization
    function Performance:OptimizeRendering()
        if self.Settings.ElementCulling then
            for _, element in pairs(self.Elements) do
                if not element.Visible then
                    element.Instance.Visible = false
                end
            end
        end
        
        if self.Settings.DynamicRendering then
            RunService.RenderStepped:Connect(function()
                for _, element in pairs(self.Elements) do
                    local pos = element.Instance.AbsolutePosition
                    local size = element.Instance.AbsoluteSize
                    local viewportSize = workspace.CurrentCamera.ViewportSize
                    
                    element.Instance.Visible = 
                        pos.X + size.X >= 0 and
                        pos.X <= viewportSize.X and
                        pos.Y + size.Y >= 0 and
                        pos.Y <= viewportSize.Y
                end
            end)
        end
    end
    
    -- Apply Performance Settings
    function Performance:ApplySettings()
        settings().Rendering.QualityLevel = self.Settings.ShadowQuality == "High" and 21 or 1
        UserSettings():GetService("UserGameSettings").SavedQualityLevel = self.Settings.ShadowQuality == "High" and 10 or 1
        
        if self.Settings.AntiAliasing then
            settings().Rendering.AutoFRMLevel = true
        else
            settings().Rendering.AutoFRMLevel = false
        end
        
        self:OptimizeRendering()
    end
    
    return Performance
end

function Library:InitializeDebugSystem()
    local Debug = {
        Logs = {},
        MaxLogs = 1000,
        Active = false,
        Categories = {
            ["INFO"] = Color3.fromRGB(255, 255, 255),
            ["WARNING"] = Color3.fromRGB(255, 235, 59),
            ["ERROR"] = Color3.fromRGB(255, 76, 76),
            ["DEBUG"] = Color3.fromRGB(76, 175, 255)
        }
    }
    
    -- Debug Console
    Debug.Console = Instance.new("Frame")
    Debug.Console.Size = UDim2.new(0, 600, 0, 400)
    Debug.Console.Position = UDim2.new(0.5, -300, 0.5, -200)
    Debug.Console.BackgroundColor3 = self.Theme.Section
    Debug.Console.BackgroundTransparency = 0.1
    Debug.Console.Visible = false
    Debug.Console.Parent = self.GUI
    
    -- Log Container
    Debug.LogContainer = Instance.new("ScrollingFrame")
    Debug.LogContainer.Size = UDim2.new(1, -20, 1, -60)
    Debug.LogContainer.Position = UDim2.new(0, 10, 0, 50)
    Debug.LogContainer.BackgroundTransparency = 1
    Debug.LogContainer.ScrollBarThickness = 2
    Debug.LogContainer.Parent = Debug.Console
    
    -- Log Layout
    local Layout = Instance.new("UIListLayout")
    Layout.Padding = UDim.new(0, 5)
    Layout.Parent = Debug.LogContainer
    
    function Debug:Log(message, category)
        category = category or "INFO"
        
        local log = {
            Message = message,
            Category = category,
            Time = os.date("%X"),
            Stack = debug.traceback()
        }
        
        -- Create Log Element
        local LogElement = Instance.new("Frame")
        LogElement.Size = UDim2.new(1, 0, 0, 25)
        LogElement.BackgroundColor3 = self.Theme.Element
        LogElement.BackgroundTransparency = 0.7
        LogElement.Parent = self.LogContainer
        
        -- Time
        local Time = Instance.new("TextLabel")
        Time.Size = UDim2.new(0, 70, 1, 0)
        Time.BackgroundTransparency = 1
        Time.Text = log.Time
        Time.TextColor3 = self.Theme.Gray
        Time.TextSize = 13
        Time.Font = self.Fonts.Regular
        Time.Parent = LogElement
        
        -- Category
        local Category = Instance.new("TextLabel")
        Category.Size = UDim2.new(0, 70, 1, 0)
        Category.Position = UDim2.new(0, 80, 0, 0)
        Category.BackgroundTransparency = 1
        Category.Text = category
        Category.TextColor3 = self.Categories[category]
        Category.TextSize = 13
        Category.Font = self.Fonts.Bold
        Category.Parent = LogElement
        
        -- Message
        local Message = Instance.new("TextLabel")
        Message.Size = UDim2.new(1, -160, 1, 0)
        Message.Position = UDim2.new(0, 150, 0, 0)
        Message.BackgroundTransparency = 1
        Message.Text = message
        Message.TextColor3 = self.Theme.Text
        Message.TextSize = 13
        Message.Font = self.Fonts.Regular
        Message.TextXAlignment = Enum.TextXAlignment.Left
        Message.Parent = LogElement
        
        -- Stack Trace (shown on click)
        LogElement.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                print("=== Stack Trace ===")
                print(log.Stack)
            end
        end)
        
        table.insert(self.Logs, log)
        
        -- Remove old logs if exceeding max
        if #self.Logs > self.MaxLogs then
            table.remove(self.Logs, 1)
            self.LogContainer:GetChildren()[1]:Destroy()
        end
        
        -- Auto-scroll
        self.LogContainer.CanvasPosition = Vector2.new(0, self.LogContainer.AbsoluteCanvasSize.Y)
    end
    
    -- Debug Tools
    function Debug:CreateTools()
        local Tools = Instance.new("Frame")
        Tools.Size = UDim2.new(1, -20, 0, 30)
        Tools.Position = UDim2.new(0, 10, 0, 10)
        Tools.BackgroundTransparency = 1
        Tools.Parent = self.Console
        
        -- Clear Button
        local Clear = Instance.new("TextButton")
        Clear.Size = UDim2.new(0, 80, 1, 0)
        Clear.BackgroundColor3 = self.Theme.Element
        Clear.BackgroundTransparency = 0.7
        Clear.Text = "Clear"
        Clear.TextColor3 = self.Theme.Text
        Clear.TextSize = 13
        Clear.Font = self.Fonts.Regular
        Clear.Parent = Tools
        
        Clear.MouseButton1Click:Connect(function()
            self.Logs = {}
            for _, log in ipairs(self.LogContainer:GetChildren()) do
                if log:IsA("Frame") then
                    log:Destroy()
                end
            end
        end)
        
        -- Filter Buttons
        local function CreateFilter(name, position)
            local Filter = Instance.new("TextButton")
            Filter.Size = UDim2.new(0, 80, 1, 0)
            Filter.Position = position
            Filter.BackgroundColor3 = self.Theme.Element
            Filter.BackgroundTransparency = 0.7
            Filter.Text = name
            Filter.TextColor3 = self.Categories[name]
            Filter.TextSize = 13
            Filter.Font = self.Fonts.Regular
            Filter.Parent = Tools
            
            local Active = true
            Filter.MouseButton1Click:Connect(function()
                Active = not Active
                Filter.BackgroundTransparency = Active and 0.7 or 0.3
                
                for _, log in ipairs(self.LogContainer:GetChildren()) do
                    if log:IsA("Frame") and log:FindFirstChild("Category") then
                        log.Visible = Active or log.Category.Text ~= name
                    end
                end
            end)
        end
        
        CreateFilter("INFO", UDim2.new(0, 90, 0, 0))
        CreateFilter("WARNING", UDim2.new(0, 180, 0, 0))
        CreateFilter("ERROR", UDim2.new(0, 270, 0, 0))
        CreateFilter("DEBUG", UDim2.new(0, 360, 0, 0))
    end
    
    return Debug
end

function Library:InitializeErrorHandler()
    local ErrorHandler = {
        Errors = {},
        MaxErrors = 100,
        AutoRecover = true,
        ErrorCallbacks = {}
    }
    
    -- Custom Error Screen
    function ErrorHandler:CreateErrorScreen(errorInfo)
        local Screen = Instance.new("Frame")
        Screen.Size = UDim2.new(1, 0, 1, 0)
        Screen.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
        Screen.BackgroundTransparency = 0.1
        Screen.Parent = self.GUI
        
        -- Error Icon
        local Icon = Instance.new("ImageLabel")
        Icon.Size = UDim2.new(0, 100, 0, 100)
        Icon.Position = UDim2.new(0.5, -50, 0.4, -50)
        Icon.BackgroundTransparency = 1
        Icon.Image = "rbxassetid://7733799185"
        Icon.ImageColor3 = Color3.fromRGB(255, 70, 70)
        Icon.Parent = Screen
        
        -- Error Message
        local Message = Instance.new("TextLabel")
        Message.Size = UDim2.new(0.8, 0, 0, 60)
        Message.Position = UDim2.new(0.1, 0, 0.6, 0)
        Message.BackgroundTransparency = 1
        Message.Text = errorInfo.Message
        Message.TextColor3 = Color3.fromRGB(255, 255, 255)
        Message.TextSize = 18
        Message.Font = self.Fonts.Bold
        Message.TextWrapped = true
        Message.Parent = Screen
        
        -- Recovery Button
        local Recover = Instance.new("TextButton")
        Recover.Size = UDim2.new(0, 200, 0, 40)
        Recover.Position = UDim2.new(0.5, -100, 0.7, 0)
        Recover.BackgroundColor3 = Color3.fromRGB(255, 70, 70)
        Recover.Text = "Attempt Recovery"
        Recover.TextColor3 = Color3.fromRGB(255, 255, 255)
        Recover.TextSize = 14
        Recover.Font = self.Fonts.Bold
        Recover.Parent = Screen
        
        Recover.MouseButton1Click:Connect(function()
            self:AttemptRecovery(errorInfo)
            Screen:Destroy()
        end)
        
        return Screen
    end
    
    -- Error Handling
    function ErrorHandler:HandleError(err, stack)
        local errorInfo = {
            Message = err,
            Stack = stack,
            Time = os.time(),
            Recovered = false
        }
        
        -- Log error
        table.insert(self.Errors, errorInfo)
        if #self.Errors > self.MaxErrors then
            table.remove(self.Errors, 1)
        end
        
        -- Notify debug system
        self.Debug:Log(err, "ERROR")
        
        -- Execute error callbacks
        for _, callback in ipairs(self.ErrorCallbacks) do
            pcall(callback, errorInfo)
        end
        
        -- Auto recovery
        if self.AutoRecover then
            self:AttemptRecovery(errorInfo)
        else
            self:CreateErrorScreen(errorInfo)
        end
    end
    
    -- Recovery System
    function ErrorHandler:AttemptRecovery(errorInfo)
        -- Basic recovery steps
        pcall(function()
            -- Reset UI elements
            for _, element in pairs(self.Elements) do
                if element.Reset then
                    element:Reset()
                end
            end
            
            -- Clear pending operations
            self.Queue = {}
            
            -- Reload configurations
            self:LoadConfig(self.DefaultConfig)
            
            -- Mark as recovered
            errorInfo.Recovered = true
            
            -- Notify recovery
            self:CreateNotification("Recovery", "UI has been recovered from error state", "success")
        end)
    end
    
    -- Register error callback
    function ErrorHandler:OnError(callback)
        table.insert(self.ErrorCallbacks, callback)
    end
    
    -- Override default error handling
    game:GetService("ScriptContext").Error:Connect(function(message, stack)
        ErrorHandler:HandleError(message, stack)
    end)
    
    return ErrorHandler
end

function Library:InitializeQueueSystem()
    local QueueSystem = {
        Queue = {},
        Processing = false,
        MaxQueueSize = 1000,
        ProcessDelay = 0.01
    }
    
    -- Queue Item Structure
    function QueueSystem:CreateQueueItem(action, priority, callback)
        return {
            Action = action,
            Priority = priority or 1,
            Callback = callback,
            TimeAdded = os.clock(),
            Status = "Pending"
        }
    end
    
    -- Add to Queue
    function QueueSystem:Add(action, priority, callback)
        if #self.Queue >= self.MaxQueueSize then
            self:RemoveOldestItem()
        end
        
        local item = self:CreateQueueItem(action, priority, callback)
        table.insert(self.Queue, item)
        
        -- Sort queue by priority
        table.sort(self.Queue, function(a, b)
            return a.Priority > b.Priority
        end)
        
        if not self.Processing then
            self:ProcessQueue()
        end
        
        return item
    end
    
    -- Remove from Queue
    function QueueSystem:RemoveOldestItem()
        local oldest = 1
        for i, item in ipairs(self.Queue) do
            if item.TimeAdded < self.Queue[oldest].TimeAdded then
                oldest = i
            end
        end
        table.remove(self.Queue, oldest)
    end
    
    -- Process Queue
    function QueueSystem:ProcessQueue()
        self.Processing = true
        
        coroutine.wrap(function()
            while #self.Queue > 0 do
                local item = self.Queue[1]
                
                -- Process item
                item.Status = "Processing"
                local success, result = pcall(function()
                    return item.Action()
                end)
                
                if success then
                    item.Status = "Completed"
                    if item.Callback then
                        item.Callback(result)
                    end
                else
                    item.Status = "Failed"
                    self.ErrorHandler:HandleError(result)
                end
                
                -- Remove processed item
                table.remove(self.Queue, 1)
                
                -- Processing delay
                wait(self.ProcessDelay)
            end
            
            self.Processing = false
        end)()
    end
    
    -- Clear Queue
    function QueueSystem:Clear()
        self.Queue = {}
        self.Processing = false
    end
    
    -- Queue Statistics
    function QueueSystem:GetStats()
        local stats = {
            Total = #self.Queue,
            Pending = 0,
            Processing = 0,
            Completed = 0,
            Failed = 0
        }
        
        for _, item in ipairs(self.Queue) do
            stats[item.Status] = stats[item.Status] + 1
        end
        
        return stats
    end
    
    -- Priority Queue Functions
    function QueueSystem:AddHighPriority(action, callback)
        return self:Add(action, 10, callback)
    end
    
    function QueueSystem:AddLowPriority(action, callback)
        return self:Add(action, 1, callback)
    end
    
    -- Batch Processing
    function QueueSystem:AddBatch(actions, priority)
        local results = {}
        local completed = 0
        
        for _, action in ipairs(actions) do
            self:Add(action, priority, function(result)
                table.insert(results, result)
                completed = completed + 1
                
                if completed == #actions then
                    return results
                end
            end)
        end
    end
    
    return QueueSystem
end

function Library:InitializeMemoryManager()
    local MemoryManager = {
        Objects = {},
        GarbageCollectionInterval = 30,
        MemoryThreshold = 1000, -- MB
        AutoCleanup = true
    }
    
    -- Object Tracking
    function MemoryManager:TrackObject(object, category)
        local trackedObject = {
            Instance = object,
            Category = category or "Uncategorized",
            Created = os.time(),
            LastUsed = os.time(),
            UseCount = 0
        }
        
        table.insert(self.Objects, trackedObject)
        return trackedObject
    end
    
    -- Memory Usage Monitoring
    function MemoryManager:GetMemoryUsage()
        return {
            Total = math.floor(game:GetService("Stats"):GetTotalMemoryUsageMb()),
            Physical = math.floor(game:GetService("Stats"):GetPhysicalMemoryUsageMb()),
            Virtual = math.floor(game:GetService("Stats"):GetVirtualMemoryUsageMb())
        }
    end
    
    -- Garbage Collection
    function MemoryManager:CollectGarbage()
        local before = self:GetMemoryUsage().Total
        
        -- Cleanup unused objects
        for i = #self.Objects, 1, -1 do
            local object = self.Objects[i]
            local timeSinceLastUse = os.time() - object.LastUsed
            
            if timeSinceLastUse > 300 and object.UseCount < 5 then -- 5 minutes unused and low usage
                if object.Instance and object.Instance.Parent then
                    object.Instance:Destroy()
                end
                table.remove(self.Objects, i)
            end
        end
        
        -- Force Lua garbage collection
        game:GetService("Debris"):AddItem(Instance.new("Frame"), 0)
        
        local after = self:GetMemoryUsage().Total
        return before - after
    end
    
    -- Memory Optimization
    function MemoryManager:OptimizeMemory()
        -- Clear unused assets
        game:GetService("ContentProvider"):PreloadAsync({})
        
        -- Clear render cache
        workspace:ClearAllChildren()
        workspace.Parent = nil
        workspace.Parent = game
        
        -- Clear property cache
        for _, object in ipairs(self.Objects) do
            if object.Instance then
                object.Instance:ClearAllChildren()
            end
        end
    end
    
    -- Auto Cleanup System
    function MemoryManager:StartAutoCleanup()
        coroutine.wrap(function()
            while self.AutoCleanup do
                local memoryUsage = self:GetMemoryUsage().Total
                
                if memoryUsage > self.MemoryThreshold then
                    local saved = self:CollectGarbage()
                    self:OptimizeMemory()
                    
                    self.Debug:Log(string.format(
                        "Auto cleanup performed: Saved %.2f MB",
                        saved
                    ), "INFO")
                end
                
                wait(self.GarbageCollectionInterval)
            end
        end)()
    end
    
    -- Memory Usage Analysis
    function MemoryManager:AnalyzeMemoryUsage()
        local analysis = {
            Categories = {},
            TotalObjects = #self.Objects,
            AverageLifetime = 0,
            HighestUsers = {}
        }
        
        for _, object in ipairs(self.Objects) do
            -- Category analysis
            if not analysis.Categories[object.Category] then
                analysis.Categories[object.Category] = 0
            end
            analysis.Categories[object.Category] += 1
            
            -- Lifetime calculation
            analysis.AverageLifetime += os.time() - object.Created
            
            -- Track high usage objects
            if object.UseCount > 100 then
                table.insert(analysis.HighestUsers, {
                    Instance = object.Instance,
                    UseCount = object.UseCount
                })
            end
        end
        
        analysis.AverageLifetime = analysis.AverageLifetime / #self.Objects
        
        return analysis
    end
    
    -- Initialize
    MemoryManager:StartAutoCleanup()
    
    return MemoryManager
end

function Library:InitializeAssetManager()
    local AssetManager = {
        Assets = {},
        LoadedAssets = {},
        PreloadEnabled = true,
        CacheEnabled = true,
        MaxCacheSize = 100
    }
    
    -- Asset Registration
    function AssetManager:RegisterAsset(id, category, priority)
        local asset = {
            Id = id,
            Category = category or "Uncategorized",
            Priority = priority or 1,
            Loaded = false,
            Instance = nil,
            LoadTime = 0,
            UseCount = 0
        }
        
        self.Assets[id] = asset
        return asset
    end
    
    -- Asset Loading
    function AssetManager:LoadAsset(id)
        local asset = self.Assets[id]
        if not asset then return nil end
        
        -- Check cache first
        if self.CacheEnabled and self.LoadedAssets[id] then
            asset.UseCount += 1
            return self.LoadedAssets[id]
        end
        
        -- Load asset
        local startTime = os.clock()
        local success, result = pcall(function()
            return game:GetService("ContentProvider"):LoadAsync(id)
        end)
        
        if success then
            asset.Loaded = true
            asset.LoadTime = os.clock() - startTime
            asset.UseCount += 1
            
            -- Cache management
            if self.CacheEnabled then
                if #self.LoadedAssets >= self.MaxCacheSize then
                    self:ClearOldestCache()
                end
                self.LoadedAssets[id] = result
            end
            
            return result
        else
            self.Debug:Log("Failed to load asset: " .. id, "ERROR")
            return nil
        end
    end
    
    -- Preloading System
    function AssetManager:PreloadAssets()
        if not self.PreloadEnabled then return end
        
        -- Sort assets by priority
        local priorityAssets = {}
        for id, asset in pairs(self.Assets) do
            table.insert(priorityAssets, asset)
        end
        table.sort(priorityAssets, function(a, b)
            return a.Priority > b.Priority
        end)
        
        -- Preload in order
        for _, asset in ipairs(priorityAssets) do
            self.QueueSystem:Add(function()
                self:LoadAsset(asset.Id)
            end, asset.Priority)
        end
    end
    
    -- Cache Management
    function AssetManager:ClearCache()
        self.LoadedAssets = {}
        self.Debug:Log("Asset cache cleared", "INFO")
    end
    
    function AssetManager:ClearOldestCache()
        local oldest = nil
        local oldestTime = math.huge
        
        for id, asset in pairs(self.Assets) do
            if asset.LoadTime < oldestTime and self.LoadedAssets[id] then
                oldest = id
                oldestTime = asset.LoadTime
            end
        end
        
        if oldest then
            self.LoadedAssets[oldest] = nil
        end
    end
    
    -- Asset Analytics
    function AssetManager:GetAnalytics()
        local analytics = {
            TotalAssets = 0,
            LoadedAssets = 0,
            CacheSize = 0,
            Categories = {},
            AverageLoadTime = 0,
            MostUsed = {}
        }
        
        for _, asset in pairs(self.Assets) do
            analytics.TotalAssets += 1
            if asset.Loaded then
                analytics.LoadedAssets += 1
            end
            
            -- Category stats
            if not analytics.Categories[asset.Category] then
                analytics.Categories[asset.Category] = 0
            end
            analytics.Categories[asset.Category] += 1
            
            -- Load time stats
            analytics.AverageLoadTime += asset.LoadTime
            
            -- Usage stats
            table.insert(analytics.MostUsed, {
                Id = asset.Id,
                UseCount = asset.UseCount
            })
        end
        
        analytics.AverageLoadTime = analytics.AverageLoadTime / analytics.TotalAssets
        analytics.CacheSize = #self.LoadedAssets
        
        -- Sort most used
        table.sort(analytics.MostUsed, function(a, b)
            return a.UseCount > b.UseCount
        end)
        
        return analytics
    end
    
    -- Initialize
    AssetManager:PreloadAssets()
    
    return AssetManager
end

function Library:InitializeConfigSystem()
    local ConfigSystem = {
        Configs = {},
        CurrentConfig = nil,
        AutoSave = true,
        SavePath = "GameSense/Configs/",
        DefaultConfig = {
            Theme = "Default",
            Performance = {
                AnimationFPS = 60,
                ElementCulling = true,
                DynamicRendering = true
            },
            UI = {
                Transparency = 0,
                Scale = 1,
                Position = UDim2.new(0.5, 0, 0.5, 0)
            },
            Keybinds = {},
            Elements = {}
        }
    }
    
    -- Config Management
    function ConfigSystem:CreateConfig(name)
        local config = {
            Name = name,
            Theme = self.CurrentTheme,
            Performance = table.clone(self.Performance.Settings),
            UI = {
                Transparency = self.GUI.BackgroundTransparency,
                Scale = self.GUI.Size,
                Position = self.GUI.Position
            },
            Keybinds = {},
            Elements = {},
            LastModified = os.time()
        }
        
        -- Save element states
        for id, element in pairs(self.Elements) do
            if element.Save then
                config.Elements[id] = element:Save()
            end
        end
        
        -- Save keybinds
        for _, bind in pairs(self.KeybindSystem.Binds) do
            config.Keybinds[bind.Name] = bind.Key.Name
        end
        
        self.Configs[name] = config
        return config
    end
    
    -- Save/Load Functions
    function ConfigSystem:SaveConfig(name)
        local config = self.Configs[name] or self:CreateConfig(name)
        local success, result = pcall(function()
            if not isfolder(self.SavePath) then
                makefolder(self.SavePath)
            end
            
            writefile(self.SavePath .. name .. ".json", 
                game:GetService("HttpService"):JSONEncode(config)
            )
        end)
        
        if success then
            self:CreateNotification("Success", "Config saved successfully!", "success")
        else
            self.Debug:Log("Failed to save config: " .. result, "ERROR")
        end
    end
    
    function ConfigSystem:LoadConfig(name)
        local success, config = pcall(function()
            return game:GetService("HttpService"):JSONDecode(
                readfile(self.SavePath .. name .. ".json")
            )
        end)
        
        if success then
            -- Apply theme
            self:ApplyTheme(config.Theme)
            
            -- Apply performance settings
            for setting, value in pairs(config.Performance) do
                self.Performance.Settings[setting] = value
            end
            self.Performance:ApplySettings()
            
            -- Apply UI settings
            self.GUI.BackgroundTransparency = config.UI.Transparency
            self.GUI.Size = config.UI.Scale
            self.GUI.Position = config.UI.Position
            
            -- Load element states
            for id, state in pairs(config.Elements) do
                local element = self.Elements[id]
                if element and element.Load then
                    element:Load(state)
                end
            end
            
            -- Load keybinds
            for name, key in pairs(config.Keybinds) do
                local bind = self.KeybindSystem:GetBindByName(name)
                if bind then
                    bind.Key = Enum.KeyCode[key]
                end
            end
            
            self.CurrentConfig = config
            self:CreateNotification("Success", "Config loaded successfully!", "success")
        else
            self.Debug:Log("Failed to load config: " .. config, "ERROR")
        end
    end
    
    -- Auto Save
    function ConfigSystem:StartAutoSave()
        if self.AutoSave then
            coroutine.wrap(function()
                while self.AutoSave do
                    if self.CurrentConfig then
                        self:SaveConfig(self.CurrentConfig.Name)
                    end
                    wait(300) -- Auto save every 5 minutes
                end
            end)()
        end
    end
    
    -- Config Import/Export
    function ConfigSystem:ExportConfig(name)
        local config = self.Configs[name]
        if config then
            return game:GetService("HttpService"):JSONEncode(config)
        end
    end
    
    function ConfigSystem:ImportConfig(data)
        local success, config = pcall(function()
            return game:GetService("HttpService"):JSONDecode(data)
        end)
        
        if success and config.Name then
            self.Configs[config.Name] = config
            self:CreateNotification("Success", "Config imported successfully!", "success")
            return true
        end
        return false
    end
    
    -- Initialize
    ConfigSystem:StartAutoSave()
    
    return ConfigSystem
end

function Library:InitializeAnimationSystem()
    local AnimationSystem = {
        Animations = {},
        ActiveAnimations = {},
        DefaultEasing = "Quad",
        DefaultDirection = "Out",
        FPS = 60
    }
    
    -- Animation Types
    AnimationSystem.Types = {
        Fade = function(element, properties)
            return {
                Start = { Transparency = 1 },
                End = { Transparency = properties.Transparency or 0 }
            }
        end,
        
        Slide = function(element, properties)
            local startPos = properties.From or element.Position
            local endPos = properties.To or element.Position
            
            return {
                Start = { Position = startPos },
                End = { Position = endPos }
            }
        end,
        
        Scale = function(element, properties)
            local startScale = properties.From or element.Size
            local endScale = properties.To or element.Size
            
            return {
                Start = { Size = startScale },
                End = { Size = endScale }
            }
        end,
        
        Color = function(element, properties)
            return {
                Start = { BackgroundColor3 = properties.From },
                End = { BackgroundColor3 = properties.To }
            }
        end
    }
    
    -- Easing Functions
    AnimationSystem.Easings = {
        Linear = function(t) return t end,
        
        Quad = {
            In = function(t) return t * t end,
            Out = function(t) return t * (2 - t) end,
            InOut = function(t)
                if t < 0.5 then return 2 * t * t end
                return -1 + (4 - 2 * t) * t
            end
        },
        
        Elastic = {
            In = function(t)
                return math.sin(13 * math.pi/2 * t) * math.pow(2, 10 * (t - 1))
            end,
            Out = function(t)
                return math.sin(-13 * math.pi/2 * (t + 1)) * math.pow(2, -10 * t) + 1
            end
        },
        
        Bounce = {
            Out = function(t)
                if t < 1/2.75 then return 7.5625 * t * t end
                if t < 2/2.75 then t = t - 1.5/2.75; return 7.5625 * t * t + 0.75 end
                if t < 2.5/2.75 then t = t - 2.25/2.75; return 7.5625 * t * t + 0.9375 end
                t = t - 2.625/2.75; return 7.5625 * t * t + 0.984375
            end
        }
    }
    
    -- Create Animation
    function AnimationSystem:Create(element, animType, properties)
        properties = properties or {}
        local animation = {
            Element = element,
            Type = animType,
            Duration = properties.Duration or 0.3,
            Delay = properties.Delay or 0,
            Easing = properties.Easing or self.DefaultEasing,
            Direction = properties.Direction or self.DefaultDirection,
            Started = false,
            Completed = false,
            StartTime = 0,
            Properties = properties
        }
        
        -- Get animation states
        local states = self.Types[animType](element, properties)
        animation.StartState = states.Start
        animation.EndState = states.End
        
        return animation
    end
    
    -- Play Animation
    function AnimationSystem:Play(animation)
        animation.Started = true
        animation.StartTime = os.clock()
        table.insert(self.ActiveAnimations, animation)
        
        -- Apply initial state
        for property, value in pairs(animation.StartState) do
            animation.Element[property] = value
        end
    end
    
    -- Update Animations
    function AnimationSystem:Update()
        for i = #self.ActiveAnimations, 1, -1 do
            local anim = self.ActiveAnimations[i]
            local elapsed = os.clock() - anim.StartTime - anim.Delay
            
            if elapsed >= 0 then
                local progress = math.min(elapsed / anim.Duration, 1)
                local easedProgress = self.Easings[anim.Easing][anim.Direction](progress)
                
                -- Update properties
                for property, endValue in pairs(anim.EndState) do
                    local startValue = anim.StartState[property]
                    local currentValue = self:Lerp(startValue, endValue, easedProgress)
                    anim.Element[property] = currentValue
                end
                
                if progress >= 1 then
                    anim.Completed = true
                    table.remove(self.ActiveAnimations, i)
                    
                    -- Callback
                    if anim.Properties.Completed then
                        anim.Properties.Completed()
                    end
                end
            end
        end
    end
    
    -- Utility Functions
    function AnimationSystem:Lerp(start, finish, alpha)
        if typeof(start) == "UDim2" then
            return UDim2.new(
                self:Lerp(start.X.Scale, finish.X.Scale, alpha),
                self:Lerp(start.X.Offset, finish.X.Offset, alpha),
                self:Lerp(start.Y.Scale, finish.Y.Scale, alpha),
                self:Lerp(start.Y.Offset, finish.Y.Offset, alpha)
            )
        elseif typeof(start) == "Color3" then
            return Color3.new(
                self:Lerp(start.R, finish.R, alpha),
                self:Lerp(start.G, finish.G, alpha),
                self:Lerp(start.B, finish.B, alpha)
            )
        else
            return start + (finish - start) * alpha
        end
    end
    
    -- Start Update Loop
    RunService.RenderStepped:Connect(function()
        AnimationSystem:Update()
    end)
    
    return AnimationSystem
end
function Library:InitializeNotificationSystem()
    local NotificationSystem = {
        Notifications = {},
        MaxNotifications = 5,
        DefaultDuration = 3,
        Spacing = 5
    }
    
    -- Notification Container
    NotificationSystem.Container = Instance.new("Frame")
    NotificationSystem.Container.Size = UDim2.new(0, 300, 1, 0)
    NotificationSystem.Container.Position = UDim2.new(1, -310, 0, 0)
    NotificationSystem.Container.BackgroundTransparency = 1
    NotificationSystem.Container.Parent = self.GUI
    
    -- Create Notification
    function NotificationSystem:Create(title, message, type, duration)
        local notification = {
            Title = title,
            Message = message,
            Type = type or "info",
            Duration = duration or self.DefaultDuration,
            Created = os.clock()
        }
        
        -- Notification Frame
        notification.Frame = Instance.new("Frame")
        notification.Frame.Size = UDim2.new(1, -10, 0, 0)
        notification.Frame.BackgroundColor3 = self.Theme.Section
        notification.Frame.BackgroundTransparency = 0.1
        notification.Frame.ClipsDescendants = true
        notification.Frame.Parent = self.Container
        
        -- Icon
        local icons = {
            success = "✓",
            error = "✕",
            warning = "!",
            info = "i"
        }
        
        local icon = Instance.new("TextLabel")
        icon.Size = UDim2.new(0, 30, 0, 30)
        icon.Position = UDim2.new(0, 5, 0, 5)
        icon.BackgroundColor3 = self:GetTypeColor(type)
        icon.Text = icons[type]
        icon.TextColor3 = Color3.new(1, 1, 1)
        icon.TextSize = 16
        icon.Font = self.Fonts.Bold
        icon.Parent = notification.Frame
        
        -- Title
        local titleLabel = Instance.new("TextLabel")
        titleLabel.Size = UDim2.new(1, -50, 0, 20)
        titleLabel.Position = UDim2.new(0, 40, 0, 5)
        titleLabel.BackgroundTransparency = 1
        titleLabel.Text = title
        titleLabel.TextColor3 = self.Theme.Text
        titleLabel.TextSize = 14
        titleLabel.Font = self.Fonts.Bold
        titleLabel.TextXAlignment = Enum.TextXAlignment.Left
        titleLabel.Parent = notification.Frame
        
        -- Message
        local messageLabel = Instance.new("TextLabel")
        messageLabel.Size = UDim2.new(1, -50, 0, 0)
        messageLabel.Position = UDim2.new(0, 40, 0, 25)
        messageLabel.BackgroundTransparency = 1
        messageLabel.Text = message
        messageLabel.TextColor3 = self.Theme.DarkText
        messageLabel.TextSize = 13
        messageLabel.Font = self.Fonts.Regular
        messageLabel.TextXAlignment = Enum.TextXAlignment.Left
        messageLabel.TextWrapped = true
        messageLabel.Parent = notification.Frame
        
        -- Calculate height
        local textSize = game:GetService("TextService"):GetTextSize(
            message,
            13,
            self.Fonts.Regular,
            Vector2.new(messageLabel.AbsoluteSize.X, math.huge)
        )
        messageLabel.Size = UDim2.new(1, -50, 0, textSize.Y)
        notification.Frame.Size = UDim2.new(1, -10, 0, textSize.Y + 35)
        
        -- Progress Bar
        local progress = Instance.new("Frame")
        progress.Size = UDim2.new(1, 0, 0, 2)
        progress.Position = UDim2.new(0, 0, 1, -2)
        progress.BackgroundColor3 = self:GetTypeColor(type)
        progress.Parent = notification.Frame
        
        -- Animation
        self.AnimationSystem:Create(notification.Frame, "Slide", {
            From = UDim2.new(1, 0, 0, notification.Frame.AbsolutePosition.Y),
            To = UDim2.new(0, 0, 0, notification.Frame.AbsolutePosition.Y),
            Duration = 0.3
        }):Play()
        
        -- Progress Animation
        self.AnimationSystem:Create(progress, "Scale", {
            From = UDim2.new(1, 0, 0, 2),
            To = UDim2.new(0, 0, 0, 2),
            Duration = notification.Duration
        }):Play()
        
        table.insert(self.Notifications, notification)
        self:UpdateNotifications()
        
        -- Auto Remove
        delay(notification.Duration, function()
            self:Remove(notification)
        end)
        
        return notification
    end
    
    -- Remove Notification
    function NotificationSystem:Remove(notification)
        -- Find and remove notification
        for i, notif in ipairs(self.Notifications) do
            if notif == notification then
                -- Animate out
                self.AnimationSystem:Create(notification.Frame, "Slide", {
                    To = UDim2.new(1, 0, 0, notification.Frame.AbsolutePosition.Y),
                    Duration = 0.2,
                    Completed = function()
                        notification.Frame:Destroy()
                        table.remove(self.Notifications, i)
                        self:UpdateNotifications()
                    end
                }):Play()
                break
            end
        end
    end
    
    -- Update Positions
    function NotificationSystem:UpdateNotifications()
        local yOffset = 0
        for _, notification in ipairs(self.Notifications) do
            self.AnimationSystem:Create(notification.Frame, "Slide", {
                To = UDim2.new(0, 0, 0, yOffset),
                Duration = 0.2
            }):Play()
            yOffset += notification.Frame.AbsoluteSize.Y + self.Spacing
        end
    end
    
    -- Utility Functions
    function NotificationSystem:GetTypeColor(type)
        local colors = {
            success = Color3.fromRGB(46, 204, 113),
            error = Color3.fromRGB(231, 76, 60),
            warning = Color3.fromRGB(241, 196, 15),
            info = Color3.fromRGB(52, 152, 219)
        }
        return colors[type] or colors.info
    end
    
    return NotificationSystem
end

function Library:InitializeDragSystem()
    local DragSystem = {
        Dragging = false,
        DraggedElement = nil,
        DropTargets = {},
        Offset = Vector2.new(),
        GridSize = 10
    }
    
    -- Make Element Draggable
    function DragSystem:MakeDraggable(element, handle, constraints)
        handle = handle or element
        
        local dragInfo = {
            Element = element,
            Handle = handle,
            Constraints = constraints or {},
            StartPosition = element.Position,
            Dragging = false
        }
        
        handle.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragInfo.Dragging = true
                self.DraggedElement = dragInfo
                
                local mousePos = UserInputService:GetMouseLocation()
                local elementPos = element.AbsolutePosition
                dragInfo.Offset = Vector2.new(
                    mousePos.X - elementPos.X,
                    mousePos.Y - elementPos.Y
                )
                
                -- Start Drag Animation
                self.AnimationSystem:Create(element, "Scale", {
                    To = UDim2.new(element.Size.X.Scale, element.Size.X.Offset * 1.05,
                                  element.Size.Y.Scale, element.Size.Y.Offset * 1.05),
                    Duration = 0.2
                }):Play()
                
                -- Create Ghost Element
                self:CreateGhost(dragInfo)
            end
        end)
        
        handle.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragInfo.Dragging = false
                self.DraggedElement = nil
                
                -- End Drag Animation
                self.AnimationSystem:Create(element, "Scale", {
                    To = dragInfo.StartSize,
                    Duration = 0.2
                }):Play()
                
                -- Check Drop Targets
                local dropped = false
                for _, target in ipairs(self.DropTargets) do
                    if self:IsOverTarget(element, target) then
                        if target.OnDrop then
                            target:OnDrop(element)
                            dropped = true
                        end
                    end
                end
                
                -- Return to start if not dropped
                if not dropped then
                    self.AnimationSystem:Create(element, "Slide", {
                        To = dragInfo.StartPosition,
                        Duration = 0.3,
                        Easing = "Elastic"
                    }):Play()
                end
                
                -- Remove Ghost
                if dragInfo.Ghost then
                    dragInfo.Ghost:Destroy()
                end
            end
        end)
        
        UserInputService.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement then
                if dragInfo.Dragging then
                    local mousePos = UserInputService:GetMouseLocation()
                    local newPos = Vector2.new(
                        mousePos.X - dragInfo.Offset.X,
                        mousePos.Y - dragInfo.Offset.Y
                    )
                    
                    -- Apply Grid Snapping
                    if self.GridSize > 0 then
                        newPos = Vector2.new(
                            math.round(newPos.X / self.GridSize) * self.GridSize,
                            math.round(newPos.Y / self.GridSize) * self.GridSize
                        )
                    end
                    
                    -- Apply Constraints
                    if dragInfo.Constraints.X then
                        newPos = Vector2.new(dragInfo.StartPosition.X.Offset, newPos.Y)
                    end
                    if dragInfo.Constraints.Y then
                        newPos = Vector2.new(newPos.X, dragInfo.StartPosition.Y.Offset)
                    end
                    
                    -- Update Position
                    element.Position = UDim2.new(
                        0, newPos.X,
                        0, newPos.Y
                    )
                    
                    -- Update Ghost
                    if dragInfo.Ghost then
                        dragInfo.Ghost.Position = element.Position
                    end
                    
                    -- Highlight Drop Targets
                    self:UpdateDropTargets(element)
                end
            end
        end)
        
        return dragInfo
    end
    
    -- Register Drop Target
    function DragSystem:RegisterDropTarget(element, callback)
        local target = {
            Element = element,
            OnDrop = callback,
            Highlighted = false
        }
        
        table.insert(self.DropTargets, target)
        return target
    end
    
    -- Utility Functions
    function DragSystem:CreateGhost(dragInfo)
        local ghost = dragInfo.Element:Clone()
        ghost.BackgroundTransparency = 0.5
        ghost.Position = dragInfo.Element.Position
        ghost.Parent = self.GUI
        dragInfo.Ghost = ghost
    end
    
    function DragSystem:IsOverTarget(element, target)
        local elementPos = element.AbsolutePosition
        local elementSize = element.AbsoluteSize
        local targetPos = target.Element.AbsolutePosition
        local targetSize = target.Element.AbsoluteSize
        
        return (elementPos.X < targetPos.X + targetSize.X and
                elementPos.X + elementSize.X > targetPos.X and
                elementPos.Y < targetPos.Y + targetSize.Y and
                elementPos.Y + elementSize.Y > targetPos.Y)
    end
    
    function DragSystem:UpdateDropTargets(element)
        for _, target in ipairs(self.DropTargets) do
            local isOver = self:IsOverTarget(element, target)
            
            if isOver and not target.Highlighted then
                -- Highlight Animation
                self.AnimationSystem:Create(target.Element, "Color", {
                    To = self.Theme.Accent,
                    Duration = 0.2
                }):Play()
                target.Highlighted = true
            elseif not isOver and target.Highlighted then
                -- Remove Highlight
                self.AnimationSystem:Create(target.Element, "Color", {
                    To = self.Theme.Section,
                    Duration = 0.2
                }):Play()
                target.Highlighted = false
            end
        end
    end
    
    return DragSystem
end

function Library:InitializeContextMenu()
    local ContextMenu = {
        Active = false,
        CurrentMenu = nil,
        Items = {},
        MaxHeight = 300,
        ItemHeight = 30
    }
    
    -- Create Menu Container
    ContextMenu.Container = Instance.new("Frame")
    ContextMenu.Container.Size = UDim2.new(0, 200, 0, 0)
    ContextMenu.Container.BackgroundColor3 = self.Theme.Section
    ContextMenu.Container.BackgroundTransparency = 0.1
    ContextMenu.Container.Visible = false
    ContextMenu.Container.ZIndex = 100
    ContextMenu.Container.Parent = self.GUI
    
    -- Show Context Menu
    function ContextMenu:Show(items, position)
        self:Hide() -- Hide any existing menu
        
        -- Clear previous items
        for _, item in ipairs(self.Items) do
            item:Destroy()
        end
        self.Items = {}
        
        -- Calculate menu size
        local menuHeight = math.min(#items * self.ItemHeight, self.MaxHeight)
        self.Container.Size = UDim2.new(0, 200, 0, menuHeight)
        
        -- Position menu
        local viewportSize = workspace.CurrentCamera.ViewportSize
        local menuPos = position or UserInputService:GetMouseLocation()
        
        -- Adjust position if menu would go off screen
        if menuPos.X + 200 > viewportSize.X then
            menuPos = Vector2.new(viewportSize.X - 210, menuPos.Y)
        end
        if menuPos.Y + menuHeight > viewportSize.Y then
            menuPos = Vector2.new(menuPos.X, viewportSize.Y - menuHeight - 10)
        end
        
        self.Container.Position = UDim2.new(0, menuPos.X, 0, menuPos.Y)
        
        -- Create menu items
        for i, item in ipairs(items) do
            self:CreateMenuItem(item, i)
        end
        
        -- Show menu with animation
        self.Container.Visible = true
        self.Active = true
        
        self.AnimationSystem:Create(self.Container, "Scale", {
            From = UDim2.new(0, 200, 0, 0),
            To = UDim2.new(0, 200, 0, menuHeight),
            Duration = 0.2,
            Easing = "Back"
        }):Play()
        
        -- Close menu when clicking outside
        local connection
        connection = UserInputService.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                local mousePos = UserInputService:GetMouseLocation()
                local menuPos = self.Container.AbsolutePosition
                local menuSize = self.Container.AbsoluteSize
                
                if mousePos.X < menuPos.X or mousePos.X > menuPos.X + menuSize.X or
                   mousePos.Y < menuPos.Y or mousePos.Y > menuPos.Y + menuSize.Y then
                    self:Hide()
                    connection:Disconnect()
                end
            end
        end)
    end
    
    -- Create Menu Item
    function ContextMenu:CreateMenuItem(item, index)
        local button = Instance.new("TextButton")
        button.Size = UDim2.new(1, 0, 0, self.ItemHeight)
        button.Position = UDim2.new(0, 0, 0, (index-1) * self.ItemHeight)
        button.BackgroundColor3 = self.Theme.Element
        button.BackgroundTransparency = 0.9
        button.Text = item.Text
        button.TextColor3 = self.Theme.Text
        button.TextSize = 14
        button.Font = self.Fonts.Regular
        button.Parent = self.Container
        
        -- Icon (if provided)
        if item.Icon then
            local icon = Instance.new("ImageLabel")
            icon.Size = UDim2.new(0, 16, 0, 16)
            icon.Position = UDim2.new(0, 10, 0.5, -8)
            icon.BackgroundTransparency = 1
            icon.Image = item.Icon
            icon.Parent = button
            
            button.TextPadding = UDim.new(0, 30)
        end
        
        -- Submenu indicator
        if item.SubMenu then
            local arrow = Instance.new("TextLabel")
            arrow.Size = UDim2.new(0, 20, 1, 0)
            arrow.Position = UDim2.new(1, -20, 0, 0)
            arrow.BackgroundTransparency = 1
            arrow.Text = ">"
            arrow.TextColor3 = self.Theme.DarkText
            arrow.TextSize = 14
            arrow.Font = self.Fonts.Regular
            arrow.Parent = button
        end
        
        -- Hover Effect
        button.MouseEnter:Connect(function()
            self.AnimationSystem:Create(button, "Color", {
                To = self.Theme.Accent,
                Duration = 0.2
            }):Play()
            
            -- Show submenu if exists
            if item.SubMenu then
                self:ShowSubMenu(item.SubMenu, button)
            end
        end)
        
        button.MouseLeave:Connect(function()
            self.AnimationSystem:Create(button, "Color", {
                To = self.Theme.Element,
                Duration = 0.2
            }):Play()
        end)
        
        -- Click Handler
        button.MouseButton1Click:Connect(function()
            if item.Callback then
                item.Callback()
            end
            self:Hide()
        end)
        
        table.insert(self.Items, button)
        return button
    end
    
    -- Hide Menu
    function ContextMenu:Hide()
        if self.Active then
            self.AnimationSystem:Create(self.Container, "Scale", {
                To = UDim2.new(0, 200, 0, 0),
                Duration = 0.2,
                Completed = function()
                    self.Container.Visible = false
                end
            }):Play()
            
            self.Active = false
        end
    end
    
    return ContextMenu
end

function Library:InitializeTooltipSystem()
    local TooltipSystem = {
        ActiveTooltip = nil,
        ShowDelay = 0.5,
        HideDelay = 0.1,
        DefaultWidth = 200,
        Padding = 10
    }
    
    -- Create Tooltip Container
    TooltipSystem.Container = Instance.new("Frame")
    TooltipSystem.Container.Size = UDim2.new(0, 200, 0, 0)
    TooltipSystem.Container.BackgroundColor3 = self.Theme.Section
    TooltipSystem.Container.BackgroundTransparency = 0.1
    TooltipSystem.Container.Visible = false
    TooltipSystem.Container.ZIndex = 1000
    TooltipSystem.Container.Parent = self.GUI
    
    -- Create Content Label
    TooltipSystem.Content = Instance.new("TextLabel")
    TooltipSystem.Content.Size = UDim2.new(1, -20, 1, -20)
    TooltipSystem.Content.Position = UDim2.new(0, 10, 0, 10)
    TooltipSystem.Content.BackgroundTransparency = 1
    TooltipSystem.Content.TextColor3 = self.Theme.Text
    TooltipSystem.Content.TextSize = 14
    TooltipSystem.Content.Font = self.Fonts.Regular
    TooltipSystem.Content.TextWrapped = true
    TooltipSystem.Content.TextXAlignment = Enum.TextXAlignment.Left
    TooltipSystem.Content.TextYAlignment = Enum.TextYAlignment.Top
    TooltipSystem.Content.Parent = TooltipSystem.Container
    
    -- Add Tooltip to Element
    function TooltipSystem:Add(element, content, options)
        options = options or {}
        local showTimer, hideTimer
        
        element.MouseEnter:Connect(function()
            -- Clear any existing timers
            if showTimer then showTimer:Disconnect() end
            if hideTimer then hideTimer:Disconnect() end
            
            -- Start show timer
            showTimer = delay(self.ShowDelay, function()
                self:Show(content, options)
            end)
        end)
        
        element.MouseLeave:Connect(function()
            -- Clear show timer
            if showTimer then showTimer:Disconnect() end
            
            -- Start hide timer
            hideTimer = delay(self.HideDelay, function()
                self:Hide()
            end)
        end)
    end
    
    -- Show Tooltip
    function TooltipSystem:Show(content, options)
        -- Update content
        self.Content.Text = content
        
        -- Calculate size
        local textSize = game:GetService("TextService"):GetTextSize(
            content,
            14,
            self.Fonts.Regular,
            Vector2.new(options.Width or self.DefaultWidth - 20, math.huge)
        )
        
        local width = options.Width or self.DefaultWidth
        local height = textSize.Y + self.Padding * 2
        
        -- Position tooltip
        local mousePos = UserInputService:GetMouseLocation()
        local viewportSize = workspace.CurrentCamera.ViewportSize
        
        local posX = mousePos.X + 20
        local posY = mousePos.Y + 20
        
        -- Adjust position if tooltip would go off screen
        if posX + width > viewportSize.X then
            posX = mousePos.X - width - 20
        end
        if posY + height > viewportSize.Y then
            posY = mousePos.Y - height - 20
        end
        
        -- Show tooltip with animation
        self.Container.Size = UDim2.new(0, width, 0, height)
        self.Container.Position = UDim2.new(0, posX, 0, posY)
        self.Container.Visible = true
        
        -- Fade in animation
        self.AnimationSystem:Create(self.Container, "Fade", {
            From = 1,
            To = 0,
            Duration = 0.2
        }):Play()
        
        -- Scale animation
        self.AnimationSystem:Create(self.Container, "Scale", {
            From = UDim2.new(0, width * 0.9, 0, height * 0.9),
            To = UDim2.new(0, width, 0, height),
            Duration = 0.2,
            Easing = "Back"
        }):Play()
        
        self.ActiveTooltip = content
    end
    
    -- Hide Tooltip
    function TooltipSystem:Hide()
        if self.Container.Visible then
            -- Fade out animation
            self.AnimationSystem:Create(self.Container, "Fade", {
                To = 1,
                Duration = 0.2,
                Completed = function()
                    self.Container.Visible = false
                end
            }):Play()
            
            self.ActiveTooltip = nil
        end
    end
    
    -- Update Tooltip Position
    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            if TooltipSystem.ActiveTooltip then
                local mousePos = UserInputService:GetMouseLocation()
                local tooltipSize = TooltipSystem.Container.AbsoluteSize
                
                TooltipSystem.Container.Position = UDim2.new(
                    0, mousePos.X + 20,
                    0, mousePos.Y + 20
                )
            end
        end
    end)
    
    return TooltipSystem
end

function Library:InitializeSearchSystem()
    local SearchSystem = {
        Elements = {},
        Results = {},
        MaxResults = 10,
        MinSearchLength = 2
    }
    
    -- Create Search Interface
    function SearchSystem:CreateSearchBar()
        local SearchBar = Instance.new("Frame")
        SearchBar.Size = UDim2.new(0, 300, 0, 40)
        SearchBar.Position = UDim2.new(0.5, -150, 0, 10)
        SearchBar.BackgroundColor3 = self.Theme.Section
        SearchBar.BackgroundTransparency = 0.1
        SearchBar.Parent = self.GUI
        
        -- Search Input
        local Input = Instance.new("TextBox")
        Input.Size = UDim2.new(1, -20, 1, -10)
        Input.Position = UDim2.new(0, 10, 0, 5)
        Input.BackgroundTransparency = 1
        Input.Text = ""
        Input.PlaceholderText = "Search..."
        Input.TextColor3 = self.Theme.Text
        Input.PlaceholderColor3 = self.Theme.DarkText
        Input.TextSize = 14
        Input.Font = self.Fonts.Regular
        Input.Parent = SearchBar
        
        -- Results Container
        local Results = Instance.new("ScrollingFrame")
        Results.Size = UDim2.new(1, 0, 0, 0)
        Results.Position = UDim2.new(0, 0, 1, 5)
        Results.BackgroundColor3 = self.Theme.Section
        Results.BackgroundTransparency = 0.1
        Results.ScrollBarThickness = 2
        Results.Visible = false
        Results.Parent = SearchBar
        
        -- Layout
        local Layout = Instance.new("UIListLayout")
        Layout.Padding = UDim.new(0, 5)
        Layout.Parent = Results
        
        -- Search Logic
        Input:GetPropertyChangedSignal("Text"):Connect(function()
            local query = Input.Text:lower()
            
            if #query >= self.MinSearchLength then
                self:PerformSearch(query)
                self:ShowResults(Results)
            else
                self:HideResults(Results)
            end
        end)
        
        return SearchBar
    end
    
    -- Register Searchable Element
    function SearchSystem:Register(element, searchData)
        table.insert(self.Elements, {
            Element = element,
            SearchData = searchData
        })
    end
    
    -- Perform Search
    function SearchSystem:PerformSearch(query)
        self.Results = {}
        
        for _, element in ipairs(self.Elements) do
            local score = self:CalculateSearchScore(query, element.SearchData)
            if score > 0 then
                table.insert(self.Results, {
                    Element = element,
                    Score = score
                })
            end
        end
        
        -- Sort results by score
        table.sort(self.Results, function(a, b)
            return a.Score > b.Score
        end)
        
        -- Limit results
        while #self.Results > self.MaxResults do
            table.remove(self.Results)
        end
    end
    
    -- Calculate Search Score
    function SearchSystem:CalculateSearchScore(query, searchData)
        local score = 0
        
        -- Check title match
        if searchData.Title and searchData.Title:lower():find(query) then
            score += 100
        end
        
        -- Check tags
        if searchData.Tags then
            for _, tag in ipairs(searchData.Tags) do
                if tag:lower():find(query) then
                    score += 50
                end
            end
        end
        
        -- Check description
        if searchData.Description and searchData.Description:lower():find(query) then
            score += 25
        end
        
        return score
    end
    
    -- Show Search Results
    function SearchSystem:ShowResults(container)
        -- Clear previous results
        for _, child in ipairs(container:GetChildren()) do
            if child:IsA("TextButton") then
                child:Destroy()
            end
        end
        
        -- Create result items
        for i, result in ipairs(self.Results) do
            local button = Instance.new("TextButton")
            button.Size = UDim2.new(1, -10, 0, 30)
            button.Position = UDim2.new(0, 5, 0, (i-1) * 35)
            button.BackgroundColor3 = self.Theme.Element
            button.BackgroundTransparency = 0.7
            button.Text = result.Element.SearchData.Title
            button.TextColor3 = self.Theme.Text
            button.TextSize = 14
            button.Font = self.Fonts.Regular
            button.Parent = container
            
            -- Click handler
            button.MouseButton1Click:Connect(function()
                if result.Element.SearchData.Callback then
                    result.Element.SearchData.Callback()
                end
            end)
            
            -- Hover effect
            button.MouseEnter:Connect(function()
                self.AnimationSystem:Create(button, "Color", {
                    To = self.Theme.Accent,
                    Duration = 0.2
                }):Play()
            end)
            
            button.MouseLeave:Connect(function()
                self.AnimationSystem:Create(button, "Color", {
                    To = self.Theme.Element,
                    Duration = 0.2
                }):Play()
            end)
        end
        
        -- Show container with animation
        container.Visible = true
        self.AnimationSystem:Create(container, "Size", {
            To = UDim2.new(1, 0, 0, math.min(#self.Results * 35, 200)),
            Duration = 0.3
        }):Play()
    end
    
    -- Hide Search Results
    function SearchSystem:HideResults(container)
        self.AnimationSystem:Create(container, "Size", {
            To = UDim2.new(1, 0, 0, 0),
            Duration = 0.3,
            Completed = function()
                container.Visible = false
            end
        }):Play()
    end
    
    return SearchSystem
end

function Library:InitializeUndoSystem()
    local UndoSystem = {
        UndoStack = {},
        RedoStack = {},
        MaxStackSize = 100,
        GroupingDelay = 0.5,
        CurrentGroup = nil,
        LastActionTime = 0
    }
    
    -- Action Structure
    function UndoSystem:CreateAction(name, undoFunc, redoFunc, data)
        return {
            Name = name,
            Undo = undoFunc,
            Redo = redoFunc,
            Data = data,
            Timestamp = os.clock()
        }
    end
    
    -- Add Action
    function UndoSystem:AddAction(name, undoFunc, redoFunc, data)
        local action = self:CreateAction(name, undoFunc, redoFunc, data)
        
        -- Check if action should be grouped
        if self.CurrentGroup and 
           (os.clock() - self.LastActionTime) < self.GroupingDelay and
           self.CurrentGroup.Name == name then
            table.insert(self.CurrentGroup.Actions, action)
        else
            -- Start new group
            self.CurrentGroup = {
                Name = name,
                Actions = {action},
                Timestamp = os.clock()
            }
            
            -- Add to undo stack
            table.insert(self.UndoStack, self.CurrentGroup)
            
            -- Clear redo stack
            self.RedoStack = {}
            
            -- Limit stack size
            if #self.UndoStack > self.MaxStackSize then
                table.remove(self.UndoStack, 1)
            end
        end
        
        self.LastActionTime = os.clock()
        self:UpdateInterface()
    end
    
    -- Undo
    function UndoSystem:Undo()
        local group = table.remove(self.UndoStack)
        if group then
            -- Execute undo functions in reverse order
            for i = #group.Actions, 1, -1 do
                local action = group.Actions[i]
                action.Undo(action.Data)
            end
            
            -- Add to redo stack
            table.insert(self.RedoStack, group)
            
            self:UpdateInterface()
            self:CreateNotification("Undo", "Undid " .. group.Name, "info")
        end
    end
    
    -- Redo
    function UndoSystem:Redo()
        local group = table.remove(self.RedoStack)
        if group then
            -- Execute redo functions in order
            for _, action in ipairs(group.Actions) do
                action.Redo(action.Data)
            end
            
            -- Add back to undo stack
            table.insert(self.UndoStack, group)
            
            self:UpdateInterface()
            self:CreateNotification("Redo", "Redid " .. group.Name, "info")
        end
    end
    
    -- Create Interface
    function UndoSystem:CreateInterface()
        local Container = Instance.new("Frame")
        Container.Size = UDim2.new(0, 80, 0, 30)
        Container.Position = UDim2.new(1, -90, 0, 10)
        Container.BackgroundTransparency = 1
        Container.Parent = self.GUI
        
        -- Undo Button
        local UndoButton = Instance.new("ImageButton")
        UndoButton.Size = UDim2.new(0, 30, 0, 30)
        UndoButton.Position = UDim2.new(0, 0, 0, 0)
        UndoButton.BackgroundColor3 = self.Theme.Element
        UndoButton.BackgroundTransparency = 0.7
        UndoButton.Image = "rbxassetid://undo_icon_id"
        UndoButton.Parent = Container
        
        -- Redo Button
        local RedoButton = Instance.new("ImageButton")
        RedoButton.Size = UDim2.new(0, 30, 0, 30)
        RedoButton.Position = UDim2.new(1, -30, 0, 0)
        RedoButton.BackgroundColor3 = self.Theme.Element
        RedoButton.BackgroundTransparency = 0.7
        RedoButton.Image = "rbxassetid://redo_icon_id"
        RedoButton.Parent = Container
        
        -- Click Handlers
        UndoButton.MouseButton1Click:Connect(function()
            self:Undo()
        end)
        
        RedoButton.MouseButton1Click:Connect(function()
            self:Redo()
        end)
        
        -- Keyboard Shortcuts
        UserInputService.InputBegan:Connect(function(input)
            if input.KeyCode == Enum.KeyCode.Z and 
               UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
                if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
                    self:Redo()
                else
                    self:Undo()
                end
            end
        end)
        
        self.Interface = {
            UndoButton = UndoButton,
            RedoButton = RedoButton
        }
    end
    
    -- Update Interface
    function UndoSystem:UpdateInterface()
        if self.Interface then
            -- Update button states
            self.Interface.UndoButton.BackgroundTransparency = #self.UndoStack > 0 and 0.7 or 0.9
            self.Interface.RedoButton.BackgroundTransparency = #self.RedoStack > 0 and 0.7 or 0.9
            
            -- Update tooltips
            if #self.UndoStack > 0 then
                local lastUndo = self.UndoStack[#self.UndoStack]
                self.TooltipSystem:Add(self.Interface.UndoButton, "Undo " .. lastUndo.Name)
            end
            
            if #self.RedoStack > 0 then
                local lastRedo = self.RedoStack[#self.RedoStack]
                self.TooltipSystem:Add(self.Interface.RedoButton, "Redo " .. lastRedo.Name)
            end
        end
    end
    
    -- Initialize
    UndoSystem:CreateInterface()
    
    return UndoSystem
end

function Library:InitializeMacroSystem()
    local MacroSystem = {
        Macros = {},
        Recording = false,
        CurrentMacro = nil,
        PlaybackSpeed = 1,
        MaxMacros = 50
    }
    
    -- Macro Structure
    function MacroSystem:CreateMacro(name)
        return {
            Name = name,
            Actions = {},
            Duration = 0,
            Created = os.time(),
            LastUsed = 0,
            UseCount = 0
        }
    end
    
    -- Start Recording
    function MacroSystem:StartRecording(name)
        if self.Recording then return end
        
        self.Recording = true
        self.CurrentMacro = self:CreateMacro(name)
        self.RecordStartTime = os.clock()
        
        self:CreateNotification("Macro", "Started recording: " .. name, "info")
    end
    
    -- Stop Recording
    function MacroSystem:StopRecording()
        if not self.Recording then return end
        
        self.Recording = false
        self.CurrentMacro.Duration = os.clock() - self.RecordStartTime
        
        -- Save macro
        if #self.CurrentMacro.Actions > 0 then
            if #self.Macros >= self.MaxMacros then
                table.remove(self.Macros, 1)
            end
            table.insert(self.Macros, self.CurrentMacro)
            
            self:CreateNotification("Macro", 
                string.format("Recorded %d actions in %.2f seconds", 
                    #self.CurrentMacro.Actions, 
                    self.CurrentMacro.Duration
                ), 
                "success"
            )
        end
        
        self.CurrentMacro = nil
    end
    
    -- Record Action
    function MacroSystem:RecordAction(actionType, data)
        if not self.Recording then return end
        
        local action = {
            Type = actionType,
            Data = data,
            Timestamp = os.clock() - self.RecordStartTime
        }
        
        table.insert(self.CurrentMacro.Actions, action)
    end
    
    -- Play Macro
    function MacroSystem:PlayMacro(name)
        local macro = self:GetMacroByName(name)
        if not macro then return end
        
        macro.LastUsed = os.time()
        macro.UseCount += 1
        
        -- Create playback coroutine
        coroutine.wrap(function()
            for _, action in ipairs(macro.Actions) do
                -- Wait for timestamp
                wait(action.Timestamp * (1 / self.PlaybackSpeed))
                
                -- Execute action
                self:ExecuteAction(action)
            end
            
            self:CreateNotification("Macro", "Finished playing: " .. name, "success")
        end)()
    end
    
    -- Execute Action
    function MacroSystem:ExecuteAction(action)
        if action.Type == "Button" then
            local button = self:GetElementById(action.Data.Id)
            if button then
                button:Click()
            end
        elseif action.Type == "Slider" then
            local slider = self:GetElementById(action.Data.Id)
            if slider then
                slider:SetValue(action.Data.Value)
            end
        elseif action.Type == "Toggle" then
            local toggle = self:GetElementById(action.Data.Id)
            if toggle then
                toggle:SetState(action.Data.State)
            end
        elseif action.Type == "Dropdown" then
            local dropdown = self:GetElementById(action.Data.Id)
            if dropdown then
                dropdown:SelectOption(action.Data.Option)
            end
        end
    end
    
    -- Create Interface
    function MacroSystem:CreateInterface()
        local Container = Instance.new("Frame")
        Container.Size = UDim2.new(0, 300, 0, 400)
        Container.Position = UDim2.new(1, -310, 0.5, -200)
        Container.BackgroundColor3 = self.Theme.Section
        Container.BackgroundTransparency = 0.1
        Container.Visible = false
        Container.Parent = self.GUI
        
        -- Macro List
        local List = Instance.new("ScrollingFrame")
        List.Size = UDim2.new(1, -20, 1, -100)
        List.Position = UDim2.new(0, 10, 0, 90)
        List.BackgroundTransparency = 1
        List.ScrollBarThickness = 2
        List.Parent = Container
        
        -- Controls
        local Controls = Instance.new("Frame")
        Controls.Size = UDim2.new(1, -20, 0, 70)
        Controls.Position = UDim2.new(0, 10, 0, 10)
        Controls.BackgroundTransparency = 1
        Controls.Parent = Container
        
        -- Record Button
        local Record = Instance.new("TextButton")
        Record.Size = UDim2.new(0, 80, 0, 30)
        Record.Position = UDim2.new(0, 0, 0, 0)
        Record.BackgroundColor3 = Color3.fromRGB(255, 70, 70)
        Record.Text = "Record"
        Record.TextColor3 = Color3.new(1, 1, 1)
        Record.Parent = Controls
        
        -- Play Button
        local Play = Instance.new("TextButton")
        Play.Size = UDim2.new(0, 80, 0, 30)
        Play.Position = UDim2.new(0, 90, 0, 0)
        Play.BackgroundColor3 = Color3.fromRGB(70, 255, 70)
        Play.Text = "Play"
        Play.TextColor3 = Color3.new(1, 1, 1)
        Play.Parent = Controls
        
        -- Speed Slider
        local Speed = Instance.new("TextBox")
        Speed.Size = UDim2.new(0, 80, 0, 30)
        Speed.Position = UDim2.new(0, 180, 0, 0)
        Speed.BackgroundColor3 = self.Theme.Element
        Speed.Text = "1x"
        Speed.TextColor3 = self.Theme.Text
        Speed.Parent = Controls
        
        -- Event Handlers
        Record.MouseButton1Click:Connect(function()
            if self.Recording then
                self:StopRecording()
                Record.BackgroundColor3 = Color3.fromRGB(255, 70, 70)
                Record.Text = "Record"
            else
                self:StartRecording("Macro_" .. #self.Macros + 1)
                Record.BackgroundColor3 = Color3.fromRGB(255, 100, 100)
                Record.Text = "Stop"
            end
        end)
        
        Speed.FocusLost:Connect(function()
            local speed = tonumber(Speed.Text:match("%d+"))
            if speed then
                self.PlaybackSpeed = math.clamp(speed, 0.1, 10)
                Speed.Text = self.PlaybackSpeed .. "x"
            end
        end)
        
        return Container
    end
    
    -- Initialize
    MacroSystem.Interface = MacroSystem:CreateInterface()
    
    return MacroSystem
end

function Library:InitializeStatisticsSystem()
    local StatisticsSystem = {
        Stats = {},
        Tracking = true,
        UpdateInterval = 1,
        MaxDataPoints = 100
    }
    
    -- Stat Categories
    StatisticsSystem.Categories = {
        Performance = {
            FPS = {
                Value = 0,
                History = {},
                Format = "%.1f FPS"
            },
            Memory = {
                Value = 0,
                History = {},
                Format = "%.1f MB"
            },
            NetworkPing = {
                Value = 0,
                History = {},
                Format = "%d ms"
            }
        },
        Interface = {
            ElementCount = {
                Value = 0,
                History = {},
                Format = "%d elements"
            },
            ActiveAnimations = {
                Value = 0,
                History = {},
                Format = "%d active"
            },
            RenderTime = {
                Value = 0,
                History = {},
                Format = "%.2f ms"
            }
        },
        Usage = {
            Actions = {
                Value = 0,
                History = {},
                Format = "%d total"
            },
            Interactions = {
                Value = 0,
                History = {},
                Format = "%d/min"
            }
        }
    }
    
    -- Track Stat
    function StatisticsSystem:TrackStat(category, name, value)
        local stat = self.Categories[category][name]
        if stat then
            stat.Value = value
            
            -- Add to history
            table.insert(stat.History, {
                Value = value,
                Time = os.clock()
            })
            
            -- Limit history size
            while #stat.History > self.MaxDataPoints do
                table.remove(stat.History, 1)
            end
            
            -- Update display
            self:UpdateStatDisplay(category, name)
        end
    end
    
    -- Get Stat Average
    function StatisticsSystem:GetAverage(category, name, duration)
        local stat = self.Categories[category][name]
        if not stat then return 0 end
        
        local total = 0
        local count = 0
        local currentTime = os.clock()
        
        for i = #stat.History, 1, -1 do
            local point = stat.History[i]
            if currentTime - point.Time > duration then break end
            
            total += point.Value
            count += 1
        end
        
        return count > 0 and (total / count) or 0
    end
    
    -- Create Interface
    function StatisticsSystem:CreateInterface()
        local Container = Instance.new("Frame")
        Container.Size = UDim2.new(0, 300, 0, 400)
        Container.Position = UDim2.new(0, 10, 0.5, -200)
        Container.BackgroundColor3 = self.Theme.Section
        Container.BackgroundTransparency = 0.1
        Container.Visible = false
        Container.Parent = self.GUI
        
        -- Create category sections
        local yOffset = 10
        for categoryName, category in pairs(self.Categories) do
            -- Category Header
            local Header = Instance.new("TextLabel")
            Header.Size = UDim2.new(1, -20, 0, 30)
            Header.Position = UDim2.new(0, 10, 0, yOffset)
            Header.BackgroundTransparency = 1
            Header.Text = categoryName
            Header.TextColor3 = self.Theme.Accent
            Header.TextSize = 16
            Header.Font = self.Fonts.Bold
            Header.Parent = Container
            
            yOffset += 35
            
            -- Stats
            for statName, stat in pairs(category) do
                local StatContainer = Instance.new("Frame")
                StatContainer.Size = UDim2.new(1, -20, 0, 25)
                StatContainer.Position = UDim2.new(0, 10, 0, yOffset)
                StatContainer.BackgroundTransparency = 1
                StatContainer.Parent = Container
                
                -- Name
                local Name = Instance.new("TextLabel")
                Name.Size = UDim2.new(0.5, -10, 1, 0)
                Name.BackgroundTransparency = 1
                Name.Text = statName
                Name.TextColor3 = self.Theme.Text
                Name.TextXAlignment = Enum.TextXAlignment.Left
                Name.Parent = StatContainer
                
                -- Value
                local Value = Instance.new("TextLabel")
                Value.Size = UDim2.new(0.5, -10, 1, 0)
                Value.Position = UDim2.new(0.5, 10, 0, 0)
                Value.BackgroundTransparency = 1
                Value.Text = string.format(stat.Format, stat.Value)
                Value.TextColor3 = self.Theme.Text
                Value.TextXAlignment = Enum.TextXAlignment.Right
                Value.Parent = StatContainer
                
                -- Store reference
                stat.Display = Value
                
                yOffset += 30
            end
            
            yOffset += 10
        end
        
        return Container
    end
    
    -- Update Display
    function StatisticsSystem:UpdateStatDisplay(category, name)
        local stat = self.Categories[category][name]
        if stat and stat.Display then
            stat.Display.Text = string.format(stat.Format, stat.Value)
        end
    end
    
    -- Start Tracking
    function StatisticsSystem:StartTracking()
        -- Performance tracking
        game:GetService("RunService").RenderStepped:Connect(function(delta)
            if not self.Tracking then return end
            
            -- FPS
            self:TrackStat("Performance", "FPS", 1/delta)
            
            -- Memory
            self:TrackStat("Performance", "Memory", 
                game:GetService("Stats"):GetTotalMemoryUsageMb())
            
            -- Network
            self:TrackStat("Performance", "NetworkPing",
                game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue())
            
            -- Interface stats
            self:TrackStat("Interface", "ElementCount", #self.Elements)
            self:TrackStat("Interface", "ActiveAnimations", #self.AnimationSystem.ActiveAnimations)
            
            -- Usage stats
            local interactions = #self.InputSystem.Interactions
            self:TrackStat("Usage", "Interactions", 
                math.floor(interactions / (os.clock() / 60)))
        end)
    end
    
    -- Initialize
    StatisticsSystem.Interface = StatisticsSystem:CreateInterface()
    StatisticsSystem:StartTracking()
    
    return StatisticsSystem
end

function Library:InitializeExportSystem()
    local ExportSystem = {
        CurrentFormat = "JSON",
        SupportedFormats = {"JSON", "Lua", "CSV"},
        Compression = true
    }
    
    -- Export Data
    function ExportSystem:Export(data, format)
        format = format or self.CurrentFormat
        local exported = ""
        
        if format == "JSON" then
            exported = game:GetService("HttpService"):JSONEncode(data)
        elseif format == "Lua" then
            exported = self:ConvertToLuaTable(data)
        elseif format == "CSV" then
            exported = self:ConvertToCSV(data)
        end
        
        if self.Compression then
            exported = self:Compress(exported)
        end
        
        return exported
    end
    
    -- Import Data
    function ExportSystem:Import(data, format)
        if self.Compression then
            data = self:Decompress(data)
        end
        
        local success, result = pcall(function()
            if format == "JSON" then
                return game:GetService("HttpService"):JSONDecode(data)
            elseif format == "Lua" then
                return loadstring("return " .. data)()
            elseif format == "CSV" then
                return self:ParseCSV(data)
            end
        end)
        
        if success then
            return result
        else
            self:CreateNotification("Import Error", "Failed to import data", "error")
            return nil
        end
    end
    
    -- Data Conversion Functions
    function ExportSystem:ConvertToLuaTable(data, indent)
        indent = indent or ""
        local result = "{\n"
        
        for key, value in pairs(data) do
            result = result .. indent .. "    ["
            
            -- Key formatting
            if type(key) == "string" then
                result = result .. string.format("%q", key)
            else
                result = result .. tostring(key)
            end
            
            result = result .. "] = "
            
            -- Value formatting
            if type(value) == "table" then
                result = result .. self:ConvertToLuaTable(value, indent .. "    ")
            elseif type(value) == "string" then
                result = result .. string.format("%q", value)
            else
                result = result .. tostring(value)
            end
            
            result = result .. ",\n"
        end
        
        return result .. indent .. "}"
    end
    
    function ExportSystem:ConvertToCSV(data)
        local result = ""
        local headers = {}
        
        -- Get headers
        for key in pairs(data[1] or {}) do
            table.insert(headers, key)
        end
        
        -- Add header row
        result = table.concat(headers, ",") .. "\n"
        
        -- Add data rows
        for _, row in ipairs(data) do
            local values = {}
            for _, header in ipairs(headers) do
                local value = row[header]
                if type(value) == "string" and value:find(",") then
                    value = string.format("%q", value)
                end
                table.insert(values, tostring(value))
            end
            result = result .. table.concat(values, ",") .. "\n"
        end
        
        return result
    end
    
    function ExportSystem:ParseCSV(data)
        local result = {}
        local headers = {}
        local lines = data:split("\n")
        
        -- Parse headers
        for header in lines[1]:gmatch("[^,]+") do
            table.insert(headers, header)
        end
        
        -- Parse data rows
        for i = 2, #lines do
            local row = {}
            local values = lines[i]:split(",")
            
            for j, value in ipairs(values) do
                -- Remove quotes if present
                if value:sub(1,1) == '"' and value:sub(-1) == '"' then
                    value = value:sub(2, -2)
                end
                row[headers[j]] = value
            end
            
            table.insert(result, row)
        end
        
        return result
    end
    
    -- Compression Functions
    function ExportSystem:Compress(data)
        -- Basic compression implementation
        return game:GetService("HttpService"):JSONEncode({
            Compressed = true,
            Data = data:gsub("(.)", function(c)
                return string.format("%02x", string.byte(c))
            end)
        })
    end
    
    function ExportSystem:Decompress(data)
        local decoded = game:GetService("HttpService"):JSONDecode(data)
        if decoded.Compressed then
            return decoded.Data:gsub("(%x%x)", function(hex)
                return string.char(tonumber(hex, 16))
            end)
        end
        return data
    end
    
    -- Create Interface
    function ExportSystem:CreateInterface()
        local Container = Instance.new("Frame")
        Container.Size = UDim2.new(0, 300, 0, 200)
        Container.Position = UDim2.new(0.5, -150, 0.5, -100)
        Container.BackgroundColor3 = self.Theme.Section
        Container.BackgroundTransparency = 0.1
        Container.Visible = false
        Container.Parent = self.GUI
        
        -- Format Dropdown
        local FormatDropdown = self:CreateDropdown({
            Position = UDim2.new(0, 10, 0, 10),
            Options = self.SupportedFormats,
            Callback = function(format)
                self.CurrentFormat = format
            end
        })
        FormatDropdown.Parent = Container
        
        -- Compression Toggle
        local CompressionToggle = self:CreateToggle({
            Position = UDim2.new(0, 10, 0, 50),
            Text = "Enable Compression",
            Callback = function(enabled)
                self.Compression = enabled
            end
        })
        CompressionToggle.Parent = Container
        
        -- Export Button
        local ExportButton = self:CreateButton({
            Position = UDim2.new(0, 10, 0, 90),
            Text = "Export",
            Callback = function()
                local data = self:Export(self.Library:GetAllData())
                setclipboard(data)
                self:CreateNotification("Export", "Data copied to clipboard", "success")
            end
        })
        ExportButton.Parent = Container
        
        -- Import Button
        local ImportButton = self:CreateButton({
            Position = UDim2.new(0, 10, 0, 130),
            Text = "Import",
            Callback = function()
                local data = self:Import(getclipboard(), self.CurrentFormat)
                if data then
                    self.Library:LoadData(data)
                    self:CreateNotification("Import", "Data imported successfully", "success")
                end
            end
        })
        ImportButton.Parent = Container
        
        return Container
    end
    
    -- Initialize
    ExportSystem.Interface = ExportSystem:CreateInterface()
    
    return ExportSystem
end


local GUI = Instance.new("ScreenGui")
GUI.Name = "GameSense"
GUI.Parent = game:GetService("CoreGui")

local Theme = {
    Background = Color3.fromRGB(17, 17, 17),
    Accent = Color3.fromRGB(140, 181, 67), -- GameSense green
    TabBackground = Color3.fromRGB(24, 24, 24),
    GroupBox = Color3.fromRGB(30, 30, 30),
    Text = Color3.fromRGB(255, 255, 255)
}

-- Main window
local MainFrame = Instance.new("Frame")
MainFrame.Size = UDim2.new(0, 800, 0, 600)
MainFrame.Position = UDim2.new(0.5, -400, 0.5, -300)
MainFrame.BackgroundColor3 = Theme.Background
MainFrame.BorderSizePixel = 0
MainFrame.Parent = GUI

-- Top bar
local TopBar = Instance.new("Frame")
TopBar.Size = UDim2.new(1, 0, 0, 30)
TopBar.BackgroundColor3 = Theme.TabBackground
TopBar.BorderSizePixel = 0
TopBar.Parent = MainFrame

local Title = Instance.new("TextLabel")
Title.Text = "gamesense"
Title.Size = UDim2.new(0, 200, 1, 0)
Title.Position = UDim2.new(0, 10, 0, 0)
Title.BackgroundTransparency = 1
Title.TextColor3 = Theme.Text
Title.TextXAlignment = Enum.TextXAlignment.Left
Title.Font = Enum.Font.Code
Title.Parent = TopBar

-- Side tab container
local TabContainer = Instance.new("Frame")
TabContainer.Size = UDim2.new(0, 60, 1, -30)
TabContainer.Position = UDim2.new(0, 0, 0, 30)
TabContainer.BackgroundColor3 = Theme.TabBackground
TabContainer.BorderSizePixel = 0
TabContainer.Parent = MainFrame

-- Content area
local ContentArea = Instance.new("Frame")
ContentArea.Size = UDim2.new(1, -60, 1, -30)
ContentArea.Position = UDim2.new(0, 60, 0, 30)
ContentArea.BackgroundColor3 = Theme.Background
ContentArea.BorderSizePixel = 0
ContentArea.Parent = MainFrame


-- Tab Icons
local Icons = {
    Combat = "rbxassetid://7072717697",
    Visuals = "rbxassetid://7072715646",
    Movement = "rbxassetid://7072724538",
    Misc = "rbxassetid://7072721682",
    Config = "rbxassetid://7072718631"
}

-- Create Tab Button
local function CreateTab(name, icon, yPos)
    local tabButton = Instance.new("ImageButton")
    tabButton.Size = UDim2.new(0, 40, 0, 40)
    tabButton.Position = UDim2.new(0, 10, 0, yPos)
    tabButton.BackgroundTransparency = 1
    tabButton.Image = icon
    tabButton.ImageColor3 = Color3.fromRGB(150, 150, 150)
    tabButton.Parent = TabContainer
    
    local content = Instance.new("ScrollingFrame")
    content.Size = UDim2.new(1, -20, 1, -20)
    content.Position = UDim2.new(0, 10, 0, 10)
    content.BackgroundTransparency = 1
    content.ScrollBarThickness = 2
    content.Visible = false
    content.Parent = ContentArea
    
    -- Left and Right columns for GroupBoxes
    local LeftColumn = Instance.new("Frame")
    LeftColumn.Size = UDim2.new(0.5, -15, 1, 0)
    LeftColumn.BackgroundTransparency = 1
    LeftColumn.Parent = content
    
    local RightColumn = Instance.new("Frame")
    RightColumn.Size = UDim2.new(0.5, -15, 1, 0)
    RightColumn.Position = UDim2.new(0.5, 15, 0, 0)
    RightColumn.BackgroundTransparency = 1
    RightColumn.Parent = content
    
    return {
        Button = tabButton,
        Content = content,
        LeftColumn = LeftColumn,
        RightColumn = RightColumn
    }
end

-- Create GroupBox with proper spacing
local function CreateGroupBox(parent, name, yPos)
    local groupBox = Instance.new("Frame")
    groupBox.Size = UDim2.new(1, 0, 0, 200)
    groupBox.Position = UDim2.new(0, 0, 0, yPos)
    groupBox.BackgroundColor3 = Theme.GroupBox
    groupBox.BorderSizePixel = 0
    groupBox.Parent = parent
    
    local header = Instance.new("TextLabel")
    header.Size = UDim2.new(1, 0, 0, 25)
    header.BackgroundColor3 = Theme.Accent
    header.Text = name
    header.TextColor3 = Theme.Text
    header.TextSize = 14
    header.Font = Enum.Font.Code
    header.Parent = groupBox
    
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, -20, 1, -35)
    container.Position = UDim2.new(0, 10, 0, 30)
    container.BackgroundTransparency = 1
    container.Parent = groupBox
    
    return container
end

-- Initialize Tabs
local Tabs = {
    Combat = CreateTab("Combat", Icons.Combat, 10),
    Visuals = CreateTab("Visuals", Icons.Visuals, 60),
    Movement = CreateTab("Movement", Icons.Movement, 110),
    Misc = CreateTab("Misc", Icons.Misc, 160),
    Config = CreateTab("Config", Icons.Config, 210)
}

-- Create Toggle with correct positioning
local function CreateToggle(parent, name, yPos)
    local toggle = Instance.new("TextButton")
    toggle.Size = UDim2.new(1, 0, 0, 25)
    toggle.Position = UDim2.new(0, 0, 0, yPos)
    toggle.BackgroundTransparency = 1
    toggle.Text = name
    toggle.TextColor3 = Theme.Text
    toggle.TextXAlignment = Enum.TextXAlignment.Left
    toggle.Font = Enum.Font.Code
    toggle.Parent = parent
    
    local indicator = Instance.new("Frame")
    indicator.Size = UDim2.new(0, 12, 0, 12)
    indicator.Position = UDim2.new(1, -17, 0.5, -6)
    indicator.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    indicator.BorderSizePixel = 0
    indicator.Parent = toggle
    
    return toggle, indicator
end

-- Create Slider with proper spacing
local function CreateSlider(parent, name, min, max, default, yPos)
    local slider = Instance.new("Frame")
    slider.Size = UDim2.new(1, 0, 0, 40)
    slider.Position = UDim2.new(0, 0, 0, yPos)
    slider.BackgroundTransparency = 1
    slider.Parent = parent
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -50, 0, 20)
    label.BackgroundTransparency = 1
    label.Text = name
    label.TextColor3 = Theme.Text
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Font = Enum.Font.Code
    label.Parent = slider
    
    local sliderBar = Instance.new("Frame")
    sliderBar.Size = UDim2.new(1, 0, 0, 4)
    sliderBar.Position = UDim2.new(0, 0, 0, 25)
    sliderBar.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    sliderBar.BorderSizePixel = 0
    sliderBar.Parent = slider
    
    local fill = Instance.new("Frame")
    fill.Size = UDim2.new((default - min)/(max - min), 0, 1, 0)
    fill.BackgroundColor3 = Theme.Accent
    fill.BorderSizePixel = 0
    fill.Parent = sliderBar
    
    local value = Instance.new("TextLabel")
    value.Size = UDim2.new(0, 30, 0, 20)
    value.Position = UDim2.new(1, -30, 0, 0)
    value.BackgroundTransparency = 1
    value.Text = tostring(default)
    value.TextColor3 = Theme.Text
    value.Font = Enum.Font.Code
    value.Parent = slider
    
    return slider, fill, value
end

-- Add elements to GroupBoxes with correct spacing
local AimbotGroup = CreateGroupBox(Tabs.Combat.LeftColumn, "Aimbot", 0)
CreateToggle(AimbotGroup, "Enable Aimbot", 0)
CreateToggle(AimbotGroup, "Silent Aim", 30)
CreateSlider(AimbotGroup, "FOV", 0, 360, 90, 60)
CreateSlider(AimbotGroup, "Smoothness", 1, 100, 20, 110)

local VisualsGroup = CreateGroupBox(Tabs.Combat.RightColumn, "Visuals", 0)
CreateToggle(VisualsGroup, "Show FOV", 0)
CreateToggle(VisualsGroup, "Visible Check", 30)

-- Color Picker with proper positioning
local function CreateColorPicker(parent, name, default, yPos)
    local colorPicker = Instance.new("TextButton")
    colorPicker.Size = UDim2.new(1, 0, 0, 25)
    colorPicker.Position = UDim2.new(0, 0, 0, yPos)
    colorPicker.BackgroundTransparency = 1
    colorPicker.Text = name
    colorPicker.TextColor3 = Theme.Text
    colorPicker.TextXAlignment = Enum.TextXAlignment.Left
    colorPicker.Font = Enum.Font.Code
    colorPicker.Parent = parent
    
    local preview = Instance.new("Frame")
    preview.Size = UDim2.new(0, 30, 0, 15)
    preview.Position = UDim2.new(1, -35, 0.5, -7)
    preview.BackgroundColor3 = default
    preview.BorderColor3 = Color3.fromRGB(60, 60, 60)
    preview.Parent = colorPicker
    
    local picker = Instance.new("Frame")
    picker.Size = UDim2.new(0, 200, 0, 220)
    picker.Position = UDim2.new(1, 10, 0, 0)
    picker.BackgroundColor3 = Theme.GroupBox
    picker.BorderSizePixel = 0
    picker.Visible = false
    picker.ZIndex = 10
    picker.Parent = colorPicker
    
    -- Color wheel
    local wheel = Instance.new("ImageLabel")
    wheel.Size = UDim2.new(0, 150, 0, 150)
    wheel.Position = UDim2.new(0.5, -75, 0, 10)
    wheel.Image = "rbxassetid://6020299385"
    wheel.ZIndex = 11
    wheel.Parent = picker
    
    return colorPicker, preview, picker
end

-- Keybind with proper spacing
local function CreateKeybind(parent, name, default, yPos)
    local keybind = Instance.new("TextButton")
    keybind.Size = UDim2.new(1, 0, 0, 25)
    keybind.Position = UDim2.new(0, 0, 0, yPos)
    keybind.BackgroundTransparency = 1
    keybind.Text = name
    keybind.TextColor3 = Theme.Text
    keybind.TextXAlignment = Enum.TextXAlignment.Left
    keybind.Font = Enum.Font.Code
    keybind.Parent = parent
    
    local bindButton = Instance.new("TextButton")
    bindButton.Size = UDim2.new(0, 50, 0, 20)
    bindButton.Position = UDim2.new(1, -55, 0.5, -10)
    bindButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    bindButton.Text = default
    bindButton.TextColor3 = Theme.Text
    bindButton.Font = Enum.Font.Code
    bindButton.Parent = keybind
    
    return keybind, bindButton
end

-- Add elements to existing groups with proper spacing
local AimbotGroup = CreateGroupBox(Tabs.Combat.LeftColumn, "Aimbot", 0)
CreateToggle(AimbotGroup, "Enable Aimbot", 0)
CreateKeybind(AimbotGroup, "Aimbot Key", "None", 30)
CreateSlider(AimbotGroup, "FOV", 0, 360, 90, 60)
CreateColorPicker(AimbotGroup, "FOV Color", Theme.Accent, 110)

local ESPGroup = CreateGroupBox(Tabs.Visuals.LeftColumn, "ESP", 0)
CreateToggle(ESPGroup, "Box ESP", 0)
CreateToggle(ESPGroup, "Name ESP", 30)
CreateColorPicker(ESPGroup, "Enemy Color", Color3.fromRGB(255, 0, 0), 60)
CreateColorPicker(ESPGroup, "Team Color", Color3.fromRGB(0, 255, 0), 90)

-- Tab Switching System
local function SwitchTab(button, tab)
    -- Hide all tabs
    for _, v in pairs(Tabs) do
        v.Content.Visible = false
        v.Button.ImageColor3 = Color3.fromRGB(150, 150, 150)
    end
    
    -- Show selected tab with animation
    tab.Content.Position = UDim2.new(-0.05, 0, 0, 10)
    tab.Content.Visible = true
    
    -- Animate tab in
    game:GetService("TweenService"):Create(tab.Content, TweenInfo.new(0.2), {
        Position = UDim2.new(0, 10, 0, 10)
    }):Play()
    
    -- Highlight selected tab
    button.ImageColor3 = Theme.Accent
end

-- Connect tab buttons
for name, tab in pairs(Tabs) do
    tab.Button.MouseButton1Click:Connect(function()
        SwitchTab(tab.Button, tab)
    end)
end

-- Show default tab
SwitchTab(Tabs.Combat.Button, Tabs.Combat)

-- Dragging System
local UserInputService = game:GetService("UserInputService")
local dragging = false
local dragInput
local dragStart
local startPos

TopBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = MainFrame.Position
        
        -- Animation on grab
        game:GetService("TweenService"):Create(TopBar, TweenInfo.new(0.1), {
            BackgroundColor3 = Theme.Accent
        }):Play()
    end
end)

TopBar.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
        
        -- Animation on release
        game:GetService("TweenService"):Create(TopBar, TweenInfo.new(0.1), {
            BackgroundColor3 = Theme.TabBackground
        }):Play()
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)

game:GetService("RunService").Heartbeat:Connect(function()
    if dragging and dragInput then
        local delta = dragInput.Position - dragStart
        MainFrame.Position = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
    end
end)

-- Toggle UI with Insert key
UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.Insert then
        MainFrame.Visible = not MainFrame.Visible
    end
end)

-- Add hover effects to all interactive elements
local function AddHoverEffect(button)
    button.MouseEnter:Connect(function()
        game:GetService("TweenService"):Create(button, TweenInfo.new(0.2), {
            TextColor3 = Theme.Accent
        }):Play()
    end)
    
    button.MouseLeave:Connect(function()
        game:GetService("TweenService"):Create(button, TweenInfo.new(0.2), {
            TextColor3 = Theme.Text
        }):Play()
    end)
end

-- Add GroupBox hover effects
local function AddGroupBoxEffects(groupBox)
    groupBox.MouseEnter:Connect(function()
        game:GetService("TweenService"):Create(groupBox, TweenInfo.new(0.2), {
            BackgroundColor3 = Color3.fromRGB(35, 35, 35)
        }):Play()
    end)
    
    groupBox.MouseLeave:Connect(function()
        game:GetService("TweenService"):Create(groupBox, TweenInfo.new(0.2), {
            BackgroundColor3 = Theme.GroupBox
        }):Play()
    end)
end

-- Add GameSense watermark
local Watermark = Instance.new("Frame")
Watermark.Size = UDim2.new(0, 200, 0, 25)
Watermark.Position = UDim2.new(1, -210, 0, 10)
Watermark.BackgroundColor3 = Theme.GroupBox
Watermark.BorderSizePixel = 0
Watermark.Parent = GUI

local WatermarkText = Instance.new("TextLabel")
WatermarkText.Size = UDim2.new(1, 0, 1, 0)
WatermarkText.BackgroundTransparency = 1
WatermarkText.Text = "gamesense | fps: 60 | ping: 30ms"
WatermarkText.TextColor3 = Theme.Text
WatermarkText.Font = Enum.Font.Code
WatermarkText.Parent = Watermark

-- Update FPS counter
local lastFrame = tick()
game:GetService("RunService").RenderStepped:Connect(function()
    local fps = math.floor(1 / (tick() - lastFrame))
    lastFrame = tick()
    local ping = math.floor(game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue())
    WatermarkText.Text = string.format("gamesense | fps: %d | ping: %dms", fps, ping)
end)

-- Apply hover effects to all elements
for _, tab in pairs(Tabs) do
    for _, element in pairs(tab.Content:GetDescendants()) do
        if element:IsA("TextButton") then
            AddHoverEffect(element)
        end
        if element:IsA("Frame") and element.BackgroundColor3 == Theme.GroupBox then
            AddGroupBoxEffects(element)
        end
    end
end

-- Notification System
local NotificationSystem = Instance.new("Frame")
NotificationSystem.Size = UDim2.new(0, 300, 1, 0)
NotificationSystem.Position = UDim2.new(1, -310, 0, 0)
NotificationSystem.BackgroundTransparency = 1
NotificationSystem.Parent = GUI

local function CreateNotification(text, duration)
    local notification = Instance.new("Frame")
    notification.Size = UDim2.new(1, 0, 0, 45)
    notification.Position = UDim2.new(1, 0, 0, #NotificationSystem:GetChildren() * 50)
    notification.BackgroundColor3 = Theme.GroupBox
    notification.BorderSizePixel = 0
    notification.Parent = NotificationSystem
    
    local accent = Instance.new("Frame")
    accent.Size = UDim2.new(0, 2, 1, 0)
    accent.BackgroundColor3 = Theme.Accent
    accent.BorderSizePixel = 0
    accent.Parent = notification
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -10, 1, 0)
    label.Position = UDim2.new(0, 10, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = Theme.Text
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Font = Enum.Font.Code
    label.Parent = notification
    
    -- Slide in
    game:GetService("TweenService"):Create(notification, TweenInfo.new(0.3), {
        Position = UDim2.new(0, 0, 0, #NotificationSystem:GetChildren() * 50)
    }):Play()
    
    -- Fade out after duration
    delay(duration, function()
        game:GetService("TweenService"):Create(notification, TweenInfo.new(0.3), {
            Position = UDim2.new(1, 0, 0, notification.Position.Y.Offset)
        }):Play()
        wait(0.3)
        notification:Destroy()
    end)
end

-- Tooltip System
local function CreateTooltip(parent, text)
    local tooltip = Instance.new("Frame")
    tooltip.Size = UDim2.new(0, 200, 0, 30)
    tooltip.BackgroundColor3 = Theme.GroupBox
    tooltip.BorderSizePixel = 0
    tooltip.Visible = false
    tooltip.ZIndex = 100
    tooltip.Parent = GUI
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -10, 1, 0)
    label.Position = UDim2.new(0, 5, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = Theme.Text
    label.Font = Enum.Font.Code
    label.ZIndex = 100
    label.Parent = tooltip
    
    parent.MouseEnter:Connect(function()
        tooltip.Position = UDim2.new(0, parent.AbsolutePosition.X + parent.AbsoluteSize.X + 10, 0, parent.AbsolutePosition.Y)
        tooltip.Visible = true
    end)
    
    parent.MouseLeave:Connect(function()
        tooltip.Visible = false
    end)
end

-- Example usage
CreateNotification("Welcome to GameSense", 3)
CreateTooltip(Tabs.Combat.Button, "Combat settings and configurations")

-- Config System
local ConfigSystem = {
    CurrentConfig = "default",
    Configs = {}
}

-- Create Config UI
local ConfigGroup = CreateGroupBox(Tabs.Config.LeftColumn, "Configurations", 0)

local configList = Instance.new("Frame")
configList.Size = UDim2.new(1, 0, 0, 200)
configList.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
configList.BorderSizePixel = 0
configList.Parent = ConfigGroup

local configScroll = Instance.new("ScrollingFrame")
configScroll.Size = UDim2.new(1, -10, 1, -10)
configScroll.Position = UDim2.new(0, 5, 0, 5)
configScroll.BackgroundTransparency = 1
configScroll.ScrollBarThickness = 2
configScroll.Parent = configList

-- Config Buttons
local function CreateConfigButton(name, yPos)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(1, -10, 0, 25)
    button.Position = UDim2.new(0, 5, 0, yPos)
    button.BackgroundColor3 = Theme.GroupBox
    button.Text = name
    button.TextColor3 = Theme.Text
    button.Font = Enum.Font.Code
    button.Parent = configScroll
    
    return button
end

-- Config Functions
local function SaveConfig(name)
    local config = {
        Combat = {},
        Visuals = {},
        Movement = {},
        Misc = {}
    }
    -- Save all settings here
    ConfigSystem.Configs[name] = config
    CreateNotification("Saved config: " .. name, 2)
end

local function LoadConfig(name)
    local config = ConfigSystem.Configs[name]
    if config then
        -- Load all settings here
        CreateNotification("Loaded config: " .. name, 2)
    end
end

-- Config Controls
local configControls = Instance.new("Frame")
configControls.Size = UDim2.new(1, 0, 0, 30)
configControls.Position = UDim2.new(0, 0, 0, 210)
configControls.BackgroundTransparency = 1
configControls.Parent = ConfigGroup

local saveButton = Instance.new("TextButton")
saveButton.Size = UDim2.new(0.5, -7.5, 1, 0)
saveButton.BackgroundColor3 = Theme.GroupBox
saveButton.Text = "Save"
saveButton.TextColor3 = Theme.Text
saveButton.Font = Enum.Font.Code
saveButton.Parent = configControls

local loadButton = Instance.new("TextButton")
loadButton.Size = UDim2.new(0.5, -7.5, 1, 0)
loadButton.Position = UDim2.new(0.5, 7.5, 0, 0)
loadButton.BackgroundColor3 = Theme.GroupBox
loadButton.Text = "Load"
loadButton.TextColor3 = Theme.Text
loadButton.Font = Enum.Font.Code
loadButton.Parent = configControls

-- Add default config
SaveConfig("default")

-- Spectator List
local SpecList = Instance.new("Frame")
SpecList.Size = UDim2.new(0, 200, 0, 300)
SpecList.Position = UDim2.new(1, -210, 0.5, -150)
SpecList.BackgroundColor3 = Theme.GroupBox
SpecList.BorderSizePixel = 0
SpecList.Parent = GUI

local specHeader = Instance.new("TextLabel")
specHeader.Size = UDim2.new(1, 0, 0, 25)
specHeader.BackgroundColor3 = Theme.Accent
specHeader.Text = "Spectators"
specHeader.TextColor3 = Theme.Text
specHeader.Font = Enum.Font.Code
specHeader.Parent = SpecList

local specContainer = Instance.new("ScrollingFrame")
specContainer.Size = UDim2.new(1, -10, 1, -35)
specContainer.Position = UDim2.new(0, 5, 0, 30)
specContainer.BackgroundTransparency = 1
specContainer.ScrollBarThickness = 2
specContainer.Parent = SpecList

-- Update spectator list
local function UpdateSpectators()
    -- Clear old entries
    for _, child in pairs(specContainer:GetChildren()) do
        child:Destroy()
    end
    
    local yPos = 0
    for _, player in pairs(game.Players:GetPlayers()) do
        if IsSpectating(player) then
            local specLabel = Instance.new("TextLabel")
            specLabel.Size = UDim2.new(1, -5, 0, 25)
            specLabel.Position = UDim2.new(0, 0, 0, yPos)
            specLabel.BackgroundTransparency = 1
            specLabel.Text = player.Name
            specLabel.TextColor3 = Theme.Text
            specLabel.TextXAlignment = Enum.TextXAlignment.Left
            specLabel.Font = Enum.Font.Code
            specLabel.Parent = specContainer
            
            yPos = yPos + 30
        end
    end
end

-- Check if player is spectating
function IsSpectating(player)
    if player.Character and player.Character:FindFirstChild("Humanoid") then
        local humanoid = player.Character.Humanoid
        return humanoid.Health > 0 and humanoid.WalkSpeed == 0
    end
    return false
end

-- Update spectator list every second
game:GetService("RunService").Heartbeat:Connect(function()
    UpdateSpectators()
end)

-- Keybind List
local KeybindList = Instance.new("Frame")
KeybindList.Size = UDim2.new(0, 200, 0, 300)
KeybindList.Position = UDim2.new(1, -210, 0.5, -150)
KeybindList.BackgroundColor3 = Theme.GroupBox
KeybindList.BorderSizePixel = 0
KeybindList.Parent = GUI

local keybindHeader = Instance.new("TextLabel")
keybindHeader.Size = UDim2.new(1, 0, 0, 25)
keybindHeader.BackgroundColor3 = Theme.Accent
keybindHeader.Text = "Keybinds"
keybindHeader.TextColor3 = Theme.Text
keybindHeader.Font = Enum.Font.Code
keybindHeader.Parent = KeybindList

local keybindContainer = Instance.new("ScrollingFrame")
keybindContainer.Size = UDim2.new(1, -10, 1, -35)
keybindContainer.Position = UDim2.new(0, 5, 0, 30)
keybindContainer.BackgroundTransparency = 1
keybindContainer.ScrollBarThickness = 2
keybindContainer.Parent = KeybindList

-- Active Keybinds Table
local ActiveKeybinds = {}

-- Add Keybind to List
local function AddKeybind(name, key)
    local keybind = Instance.new("TextLabel")
    keybind.Size = UDim2.new(1, -5, 0, 25)
    keybind.Position = UDim2.new(0, 0, 0, #keybindContainer:GetChildren() * 30)
    keybind.BackgroundTransparency = 1
    keybind.Text = name .. " [" .. key .. "]"
    keybind.TextColor3 = Theme.Text
    keybind.TextXAlignment = Enum.TextXAlignment.Left
    keybind.Font = Enum.Font.Code
    keybind.Parent = keybindContainer
    
    -- Add to active keybinds
    ActiveKeybinds[name] = key
end

-- Remove Keybind from List
local function RemoveKeybind(name)
    ActiveKeybinds[name] = nil
    -- Refresh keybind list
    for _, child in pairs(keybindContainer:GetChildren()) do
        child:Destroy()
    end
    for name, key in pairs(ActiveKeybinds) do
        AddKeybind(name, key)
    end
end

-- Example usage
AddKeybind("Aimbot", "Mouse1")
AddKeybind("ESP", "V")
AddKeybind("Bhop", "Space")

-- Update keybind list visibility
game:GetService("UserInputService").InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.Tab then
        KeybindList.Visible = not KeybindList.Visible
    end
end)
 

-- Toggle functionality
local function CreateToggle(parent, name, callback)
    local toggle = Instance.new("TextButton")
    toggle.Size = UDim2.new(1, 0, 0, 25)
    toggle.BackgroundTransparency = 1
    toggle.Text = name
    toggle.TextColor3 = Theme.Text
    toggle.TextXAlignment = Enum.TextXAlignment.Left
    toggle.Font = Enum.Font.Code
    toggle.Parent = parent
    
    local indicator = Instance.new("Frame")
    indicator.Size = UDim2.new(0, 12, 0, 12)
    indicator.Position = UDim2.new(1, -17, 0.5, -6)
    indicator.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    indicator.BorderSizePixel = 0
    indicator.Parent = toggle
    
    local enabled = false
    
    toggle.MouseButton1Click:Connect(function()
        enabled = not enabled
        
        -- Animate the indicator
        game:GetService("TweenService"):Create(indicator, TweenInfo.new(0.2), {
            BackgroundColor3 = enabled and Theme.Accent or Color3.fromRGB(60, 60, 60)
        }):Play()
        
        -- Call the callback with the new state
        callback(enabled)
    end)
    
    -- Add hover effect
    toggle.MouseEnter:Connect(function()
        game:GetService("TweenService"):Create(toggle, TweenInfo.new(0.2), {
            TextColor3 = Theme.Accent
        }):Play()
    end)
    
    toggle.MouseLeave:Connect(function()
        game:GetService("TweenService"):Create(toggle, TweenInfo.new(0.2), {
            TextColor3 = Theme.Text
        }):Play()
    end)
    
    return toggle, indicator, function() return enabled end
end

-- Button functionality
local function CreateButton(parent, name, callback)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(1, 0, 0, 25)
    button.BackgroundColor3 = Theme.GroupBox
    button.Text = name
    button.TextColor3 = Theme.Text
    button.Font = Enum.Font.Code
    button.Parent = parent
    
    button.MouseButton1Click:Connect(function()
        -- Ripple effect
        game:GetService("TweenService"):Create(button, TweenInfo.new(0.1), {
            BackgroundColor3 = Theme.Accent
        }):Play()
        
        wait(0.1)
        
        game:GetService("TweenService"):Create(button, TweenInfo.new(0.1), {
            BackgroundColor3 = Theme.GroupBox
        }):Play()
        
        -- Call the callback
        callback()
    end)
    
    -- Add hover effect
    button.MouseEnter:Connect(function()
        game:GetService("TweenService"):Create(button, TweenInfo.new(0.2), {
            TextColor3 = Theme.Accent
        }):Play()
    end)
    
    button.MouseLeave:Connect(function()
        game:GetService("TweenService"):Create(button, TweenInfo.new(0.2), {
            TextColor3 = Theme.Text
        }):Play()
    end)
    
    return button
end
